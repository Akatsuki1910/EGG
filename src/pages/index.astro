---
import Layout from "../layouts/Layout.astro";

const posts = await Astro.glob("../docs/**/*.txt");
const filePath = posts.map((v) => v.default);
const b = await Promise.all(
  filePath.map((path) =>
    fetch(`${Astro.url.origin}${path}`).then((response) => response.text())
  )
);

const textPath = filePath.map((path) =>
  path.replace("/src/docs/", "").split("/")
);
let dMap = new Map();
for (let i = 0; i < textPath.length; i++) {
  let e = dMap;
  for (let l = 0; l < textPath[i].length; l++) {
    const t = textPath[i][l];
    if (t.includes(".txt")) {
      const f = t.replace(".txt", "").split(" ").slice(1).join(" ").trim();
      e.set(i, f);
    } else if (!e.has(t)) {
      e.set(t, new Map());
      e = e.get(t);
    } else {
      e = e.get(t);
    }
  }
}

const tags = [...new Array(3)].map((_, i) => `h${i + 2}`);
---

<Layout>
  <main class="main">
    <h1>E.G.G.</h1>
    {
      (() => {
        const doms: HTMLElement[] = [];
        const getData = (d: any, i: number) => {
          const keys = d.keys();
          for (let key of keys) {
            const data = d.get(key);
            const TT = tags[i];
            if (typeof data === "object") {
              doms.push(<TT>{key}</TT>);
              getData(data, i + 1);
            } else {
              doms.push(<TT>{data}</TT>);
              doms.push(<p>{b.shift()}</p>);
            }
          }
        };
        getData(dMap, 0);
        return doms;
      })()
    }
  </main>
</Layout>

<style>
  .main {
    /* white-space: pre-line; */
  }
</style>
