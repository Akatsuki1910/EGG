デプロイプラットフォームにはGKE、Cloud Run、App Engine、Cloud Functionsもあります
Google Kubernetes Engine（GKE）では、マネージド環境でGoogleのインフラを使ってコンテナ化アプリをデプロイ、管理、スケールできます
GKE環境は複数のCompute Engine仮想マシン（VM）からなり、これらのVMがクラスタを形成します
GKEクラスタではKubernetesオープンソース、クラスタ管理システムが使用されます
Kubernetesには、クラスタを操作するメカニズムがあります
Kubernetesのコマンドとリソースを使って、アプリのデプロイと管理、管理タスクの実行、ポリシーの設定、デプロイ済み、ワークロードのモニタリングを行えます
右図は、Kubernetesクラスタのレイアウトを示しています
クラスタは１つ以上のコントロールプレーンと複数のワーカーマシン（ノード）からなります
コントロールプレートとノードマシンが、クラスタオーケストレーションシステムを実行します
Podは、Kubernetesでデプロイできる最小の基本オブジェクトです
クラスタ内で実行されるプロセスの単一インスタンスを表します
PodにはDockerなどのコンテナが１つ以上含まれ、デプロイされたサービスが実行されます
複数サービスを同じクラスタにデプロイして、リソースを有効利用できます
一方、Cloud RunではコンテナをGoogleが管理するKubernetesクラスタにデプロイできます
クラスタの管理や構成が不要になるのが、大きな利点です
デプロイするサービスはステートレスで、イメージをContainer Registryに置く必要があります
Cloud Runを使うとAnthos GKEクラスタへのデプロイを自動化できます
サービスの管理を強化するには、自動化が必要です
これによりVPCネットワークへのアクセスやインスタンスのサイズ調整、全GKEリージョンでのサービス実行が可能になります
右図のようにCloud Runの構成では、コンテナイメージURLとともにデプロイプラットフォームとして、フルマネージドCloud RunまたはCloud Run for Anthosを指定できます
App Engineはフルマネージドのサーバーレスアプリプラットフォームです
アプリの構築とデプロイを支援します
アプリをゼロからシームレスにスケールでき、基盤となるインフラの管理を意識する必要はありません
マイクロサービス用に設計されているため、各Google Cloudプロジェクトに１つのApp Engineアプリを含めて、そのアプリにサービスを１つ以上設定できます
各サービスはバージョンを１つ以上、バージョンはインスタンスを１つ以上持てます
トラフィック分割にも対応するため、バージョンの切り替えやカナリアテスト、A/Bテストなどの戦略の切り替えも簡単です
右図に示すGoogle Cloudプロジェクトに含まれる２つのサービスには、それぞれ２つのバージョンがあります
各サービスを個別にデプロイして、バージョニングできます
一般的なアーキテクチャを紹介します
これはオンライン販売を行う小売業の例です
App Engineはウェブとモバイル双方のクライアントのフロントエンドです
バックエンドは各種のGoogle Cloudストレージソリューションで、画像などの静的コンテンツはCloud Storageに保存され、顧客や販売関連の構造化されたリレーショナルデータはCloud SQLに保存され、製品データなどのNoSQLデータはFirestoreに保存されます
Firestoreには、クライアントアプリと同期できるという長所があります
Memcacheでクエリをキャッシュに保存して、データストアの負荷を軽減し、Cloud Tasksを使用して、ユーザーリクエストやサービス間リクエストの外部で処理を非同期で実行します
管理用のデータレポートを生成するバッチアプリもあります
疎結合のイベントドリブンマイクロサービスのデプロイにはCloud Functionsが最適です
Google Cloud内でのイベントを処理するように設計されているため、Storageバケット、Pub/Subメッセージ、HTTPリクエストの変更でファンクションをトリガーできます
このプラットフォームはフルマネージド型でスケーラブルかつ低価格です
リクエストがなければ料金は発生せず、処理の実行時間に応じて100ミリ秒単位で料金が発生します
この図は、Cloud Functionsで実装される画像翻訳サービスを示しています
画像がStorageバケットにアップロードされると、OCR用のファンクションがトリガーされ、GoogleのCloud Vision APIを使って画像内のテキストが識別されます
次に、翻訳用のPub/Subトピックにメッセージが公開されます
すると別のファンクションがトリガーされ、Cloud Translation APIを使って画像内のテキストが翻訳されます
この翻訳用ファンクションにより、Pub/Subのファイル書き込みトピックにメッセージが公開され、翻訳された画像をファイルに書き込むファンクションがトリガーされます
この流れはCloud Functionsでのイベントベース処理の一般的な例です
