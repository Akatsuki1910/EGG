信頼性を考慮した設計が完了したので、障害対策を見ていきます
リージョン内の複数のゾーンへのデプロイで高可用性を実現できます
Compute Engineを使用する場合、可用性を高めるにはリージョンインスタンスグループを使ってインスタンスの動作を維持します
アプリヘルスチェックの自動修復を使用し、ロードバランシングで負荷を分散します
データの高可用性を保つ方法は選択したストレージソリューションによって異なります
Cloud SQLの場合、DBを高可用性向けに構成できるため冗長性が確保され、別のゾーンにDBサーバーのスタンバイインスタンスが配置されます
この図は高可用性構成を示し、ウェブアプリのリージョンマネージドインスタンスグループがロードバランサの背後に配置されています
マスターCloud SQLインスタンスがus-central1-aに、レプリカインスタンスがus-central1-fにあります
FirestoreやSpannerなど一部のデータサービスは、デフォルトで高可用性を提供します
前の例では、リージョンマネージドインスタンスグループが複数のゾーンにVMを分散しました
インスタンスグループの作成時は、この画像のようにシングルゾーン構成とマルチゾーン（リージョン）構成を選択できます
この画像のようにGKEクラスタも、シングルゾーンまたはマルチゾーンにデプロイできます
クラスタは１つのマスターコントローラと複数のノードプールで構成されます
リージョンクラスタの場合、１つのリージョンの複数のゾーンにクラスタのマスターとそのノードが複製され、両方の可用性が向上します
サービスでインスタンスグループを使う場合、ヘルスチェックを作成して自動修復を有効にします
ヘルスチェックはテストエンドポイントです
サーバーが稼働しておりサービスが、リクエストを受け入れ可能であることを示す必要があります
他のバックエンドサービスでは、適切なヘルスチェックの作成が難しいため、サービスが実行可能な状態であることを確実に確認できるようにする必要があります
依存するサービスが使用不能な場合、バックエンドサービスも使用できません
ヘルスチェックが失敗すると、失敗したインスタンスが削除され、新しいものが作成されます
ヘルスチェックは、ロードバランサがリクエストの送信先を特定する際にも使われる場合があります
Google CloudのデータストレージとDBサービスの高可用性を実現する方法を確認します
Cloud Storageの場合、レイテンシの影響が小さければ、マルチリージョンのストレージバケットで高可用性を実現できます
この表に示すようにマルチリージョンでは、非可用性が0.1%から0.05%に下がるため、可用性の効果は２倍です
Cloud SQLの場合はフェイルオーバーレプリカで高可用性を実現します
この図の構成では、マスターと同じリージョン内の別のゾーンにレプリカが作成されています
マスターが使用不能になると、自動でフェイルオーバーされ、マスターが引き継がれます
この設計では追加インスタンスの料金が生じます
FirestoreとSpannerは単一またはマルチリージョンにデプロイできます
マルチリージョンロケーションは、米国などの地理的なエリアを表します
マルチリージョンのデータは、複数のリージョンに複製されます
リージョン内では、ゾーン間でデータが複製されます
マルチリージョンでは、リージョン全体が消失しても、データを失うことなく可用性を維持できます
FirestoreとSpannerのどちらのマルチリージョン構成でも、99.999%の可用性が提供され、年間ダウンタイムは６分未満です
高可用性を確保したデプロイでは、追加リソースが使われるため、費用が増えます
そのため、設計プロセスの一環として、アーキテクチャの決定事項にかかる費用の検討が重要です
使用リソースの費用を見積もるだけでなく、サービス停止時の費用も考慮してください
この表で、各種デプロイ方法におけるサービス停止時の費用を比較すれば
効果的にリスクと費用を評価できます
障害復旧戦略をいくつか紹介します
単純な障害復旧戦略として、コールドスタンバイの設置があります
永続ディスクのスナップショット、マシンイメージ、データバックアップを作成し、マルチリージョンストレージに保存します
図は、この戦略を使った単純なシステムを示します
スナップショットを作成し、システムの再構築に使用できます
メインリージョンでの障害時は、スナップショットと永続ディスクを使いバックアップのサーバーを起動できます
新しいリージョンへのリクエストの転送が必要で、この復旧手順の文書化と定期的なテストが重要です
もう１つの障害復旧戦略はホットスタンバイの使用です
インスタンスが複数のリージョンにあり、グローバルロードバランサでトラフィックを転送します
この図はその構成を示しています
マルチリージョンのCloud Storage、バケットなどのストレージサービスや、SpannerやFirestoreなどのDBサービス用にも実装できます
どの障害復旧計画でも、２つの観点から目標について考える必要があります
目標復旧時点と目標復旧時間です
目標復旧時点は損失が許容されるデータの量、目標復旧時間はバックアップから復旧するまでの時間です
データ損失やサービス障害を招く可能性があるシナリオを考え、これと同様の表を作成してください
各種シナリオを構造化して、適切に優先付けするのに役立ちます
以降の設計アクティビティでも復旧計画と一緒に同様の表を作成します
定義した障害シナリオをもとに、復旧方法を計画する必要があります
シナリオごとに、リスクおよび目標復旧時点と目標復旧時間に基づいて戦略を考えます
戦略を文書化して残す必要はありません
障害から復旧するためのプロセスをすべての関係者に伝えてください
この手順のテストと検証を年に１回以上、定期的に行う必要があります
復旧プロセスを日常業務の一環として、効率化できれば理想的です
この表は、各種リソースのバックアップ戦略、バックアップのロケーション、復旧手順を示しています
把握する必要がある情報の種類がわかりやすくなっています
次の設計アクティビティに進む前に、訓練によってチームが障害に備えることの重要性について説明します
まず、発生する恐れがあるシステム異常を特定し、各シナリオに対処するための計画を考えて文書化します
次に、これらの計画をテスト環境や本番環境で定期的に実践します
各段階でリスクを慎重に評価し、可用性を確保する費用と利用不可の場合の費用を比較します
利用不可の場合の費用は、システムの弱点を把握していないリスクを評価するうえで役立ちます
