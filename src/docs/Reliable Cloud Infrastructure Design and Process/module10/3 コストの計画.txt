設計の重要なフェーズである費用の計画は、容量計画から始まります
容量計画は１回限りのタスクとしてではなく、このスライドに示すように継続的な反復サイクルとして行ってください
最初に、必要な容量を見積もって予測し、モニタリングして予測を再検討します
次に、予測した容量に対応するために必要なリソースの量を判断して割り当てます
こうするとリスクと成果とのバランスの取れた費用を見積もることができます
設計と費用が承認されたら、その設計をデプロイしモニタリングして予測がどの程度正確か確認します
その結果を次の反復サイクルの予測に反映させます
費用の最適化に取り組むには、まずVMインスタンスの料金について理解します
おすすめの方法は、まず少数の小規模なマシンから始めて、自動スケーリングで需要に応じてスケールアウトすることです
仮想マシンの費用を最適化するには、確約利用割引の利用を検討してください
大幅な割引になる場合があります
ワークロードでプリエンプティブルVMを使用できる場合は最大80%節約できます
VMがプリエンプトされても、自動修復機能を使用すれば復元できます
右側に示すように、Compute EngineはVMインスタンスの適正サイズも推奨します
この便利な機能によりワークロードに適したサイズのVMを選択して費用を最適化できます
よくある間違いは、ディスク容量を過剰に割り当てることです
これにより費用効率が悪くなりますが、ディスクの選択基準はサイズだけではありません
重要なのは、アプリが提示するパフォーマンス特性を判断することです
I/Oパターンが大量の読み取りと少量の書き込みか、またはその逆か、主に読み取りかを見極めます
こうした情報が適切なディスクタイプの選択に役立ちます
この表に示すように、SSD永続ディスクは標準永続ディスクよりはるかに高額です
I/Oパターンを理解していれば、大幅に費用を節約できます
ネットワーク費用を最適化するには、アクセスする必要のあるデータのできるだけ近くにマシンを配置します
この図は異なる種類の下り（外向き）を示します
具体的には、同一ゾーン内、同一リージョンのゾーン間、大陸間の下り、インターネットへの下りです
下り料金も重要な考慮事項ですが、すべての料金が単純明瞭とは限りません
同一ゾーン内の下りは無料です
同一リージョン内の別のサービスへの下りは、外部IPアドレスでも内部IPアドレスでも無料ですが、Memorystore for Redisなどのサービスは例外です
同一リージョン内のゾーン間の下りは有料です
インターネットへの下りも例外なく有料です
マシンをデータの近くに配置すると、ネットワーク費用を最適化できます
費用を最適化する別の方法として、GKE使用状況測定を使用し、Kubernetesクラスタの過剰プロビジョニングを防ぎます
GKE使用状況測定のエージェントは、リソースリクエストを収集するほか、PodMetricsオブジェクトをポーリングして指標サーバーから使用状況の指標も収集します
リソースリクエストレコードとリソース使用状況レコードは、指定したBigQueryデータセット内の２つの異なるテーブルにエクスポートされます
リクエストされたリソースと、使用された分を比較して、簡単に無駄を特定し是正措置を取ることができます
この図に示すように典型的な構成では、BigQueryを使って使用状況測定エージェントからリクエストベースの指標を収集し、課金データのエクスポートで取得したデータと併せてデータポータルのダッシュボードで分析します
このコースではすでに各種ストレージサービスを紹介しました
これらのオプションの費用と特性を比較することが重要です
たとえば、Firestoreには現時点で、１GBのストレージを無料で使用できる無料枠があります
同じ量のデータをCloud Bigtableに保存すると、最低３つのBigtableノードが必要になるため、毎月$1,000を超える費用がかかります
つまり、どのストレージとDBサービスを選ぶかによって、請求額に大きな違いが出てきます
アーキテクチャの設計も費用の最適化に役立ちます
たとえば、静的コンテンツにCloud CDNを使うか、Memorystoreをキャッシュとして使うとリソースの割り当て量を増やすよりも費用を節約できます
同様に、２つのアプリでデータストアを共有する代わりに、Pub/Subのメッセージング/キューを使用して通信サービスを分離すれば必要なストレージ容量が減ります
料金計算ツールは費用を見積もる際に頼りになります
予測と容量計画に基づいて、費用を見積もることができます
演算やストレージ用の各種サービスの費用も比較できます
次の設計アクティビティで実際に使用します
既存サービスの費用をモニタリングするには、ここに示すCloud請求レポートを使用できます
このレポートには前月と比較した費用の変化が示されます
右側のフィルタを使って、特定のプロジェクト、プロダクト、リージョンを検索できます
Compute Engineインスタンスの適正サイズも推奨されます
費用を詳しく分析するには、課金データをBigQueryにエクスポートすることをおすすめします
課金データを分析して、高額の費用がかかっている部分を特定し、Google Cloudの費用を最適化できます
たとえば、異なるリージョンに分散しているVMインスタンスにラベルを設定します
インスタンスがトラフィックの大半を別の大陸に送信している場合、高額の費用がかかります
その場合、一部のインスタンスを再配置するか、Cloud CDNなどを使ってコンテンツをユーザーの近くでキャッシュに保存すれば、ネットワーキングの費用を削減できます
データポータルを使うと、費用の経時的な変化を可視化できます
データがダッシュボードやレポートで表示されるため、見やすく簡単に共有できるうえ詳細なカスタマイズも可能です
サービスデータは日別と月別で表示されるので、一目で概要を把握できます
データをドリルダウンして詳細な分析情報も確認できます
予算を設定すると、プロジェクト計画と費用管理に役立ちます
予算を設定することで、予算額に対する利用額の増加状況を追跡できます
これは予算作成インターフェースです
まず、予算名を設定し、予算を適用するプロジェクトを指定します
次に、特定の予算額を設定するか前月の利用額を予算として設定します
最後に予算アラートを設定します
予算アラートにより、利用額が予算の一定の割合または指定額を超過すると課金管理者にメールが送信されます
この例では、利用額が予算額の50%、90%、100%に達するとメールが送信されます
予算期間の終了時までに利用額が予算額の一定の割合を超えると予想される場合にアラートを送信することもできます
メールの受信に加えて、Pub/Sub通知を使うと予算に関する利用額の更新をプログラムで受信できます
Pub/SubトピックをリッスンするCloud Functions関数を作成すれば、費用管理を自動化できます
