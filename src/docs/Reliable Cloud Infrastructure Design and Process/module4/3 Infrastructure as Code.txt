次のトピックはInfrastructure as Code（IaC）です
クラウドへの移行には、考え方の転換が必要です
クラウドコンピューティングはオンデマンドの従量課金モデルであり、オンプレミスインフラのプロビジョニングとは異なります
オンプレミスモデルでは、一般にマシンを購入して継続的に稼働させます
また、コンピューティングインフラは少数の大型マシンで構築されます
会計上、マシンは設備投資に該当し時間の経過とともに価値が下がります
クラウドを使用する場合、リソースは購入するのではなくレンタルなので、費用を抑えるために不要になったらすぐにマシンを無効にする必要があります
したがって通常は小規模なマシンを多数運用するスケールアウトのアプローチとなり、障害を想定したうえで設計します
会計上、マシンは毎月の運用コストに該当します
つまり、クラウドではすべてのインフラが廃棄可能である必要があります
その鍵となるのが、Infrastructure as Code（IaC）です
IaCを使用すると、プロビジョニング、構成、デプロイの各作業を自動化できます
プロセスの自動化により、リスクは最小限になり人的ミスが排除され、再現可能なデプロイ、規模、スピードを実現できます
マシンが１台でも100台でもデプロイの労力は同じです
自動化するにはスクリプトを使用できます
後ほど説明するTerraformのような宣言型ツールも使用できます
重要なのは、故障したマシンの修理やパッチやアップグレードのインストールに時間を費やさないようにすることです
こうした作業は、後日環境を再作成する際の問題につながります
マシンの保守が必要であれば、削除してマシンを新たに作成します
費用を削減するために、本番環境を複製したテスト環境といった一時的な環境をプロビジョニングできます
TerraformはIaCに使用されるツールの一つです
Terraformについて詳しく説明する前に、IaCとは何か確認しましょう
基本的に、IaCではインフラのプロビジョニングや削除を迅速にできます
デプロイのオンデマンド、プロビジョニングはとても便利です
これを継続的インテグレーション、パイプラインに組み込めるので、継続的デプロイをスムーズに行えます
インフラの自動プロビジョニングとは、オンデマンドでインフラを用意できることを意味し、デプロイの複雑性はコードで管理されます
そのため要件の変更に応じて、柔軟にインフラを変更できます
すべての変更は一元管理されます
開発やテストなどの環境のインフラによって、本番環境を簡単に再現でき、不要になったら直ちに削除できます
このすべてがIaCによって可能になります
IaCに使用できるツールは複数あります
Google CloudではTerraformを使用して、構成ファイルにデプロイを記述できます
プロビジョニングする全リソースの詳細をここに記述できます
テンプレートで構成をモジュール化すれば、複数のデプロイで再利用可能なコンポーネントにリソースを抽象化することもできます
Terraform以外にもGoogle CloudではIaC用のツールとして、Chef、Puppet、Ansible、Packerを使用できます
このコースではTerraformに着目します
Terraformはオープンソースのリソースプロビジョニングツールであり、VM、コンテナ、ストレージ、ネットワークなどのGoogle Cloudリソースを宣言型構成ファイルでプロビジョニングできます
アプリに必要なリソースを宣言形式で指定するだけで構成をデプロイできます
HashiCorp構成言語（HCL）を使うと、ブロック、引数、式を使用してリソースを簡潔に記述できます
このデプロイは何回繰り返しても常に一貫した結果になり、１つのコマンドやワンクリックでデプロイ全体を削除できます
宣言型アプローチの利点は、ユーザーは必要な構成内容だけを指定し、構成の手順はシステムに任せられることです
各リソースを個別にデプロイする代わりに、アプリやサービスを構成する一連のリソースをまとめて指定できるので、アプリに集中できます
Cloud Shellとは異なり、Terraformはリソースを並行してデプロイします
TerraformはGoogle Cloudサービスの基盤となるAPIを使用してリソースをデプロイします
そのためこれまで見てきたほとんどのものをデプロイできます
インスタンス、インスタンステンプレート、グループ、VPCネットワーク、ファイアウォールルール、VPNトンネル、Cloud Routers、ロードバランサなどです
サポートされるリソースタイプの一覧は、“Google CloudでTerraformを使用する”をご覧ください
コースのリソースにリンクがあります
Terraform言語はリソースを宣言するためのUIです
リソースはCompute Engine、ストレージ、コンテナなどのインフラオブジェクトです
Terraform構成はTerraform言語で記述される完全なドキュメントで、特定のインフラ一式の管理方法をTerraformに指示します
複数のファイルとディレクトリからなる構成にすることもできます
Terraform言語の構文に含まれる要素を説明します
ブロックはオブジェクトを表し、０個以上のラベルを使用できます
ブロックには本文があり、引数やネストしたブロックを宣言できます
引数は名前に値を割り当てるために使用します
式は各種IDに値を割り当てるために使用します
Terraformは複数のパブリックおよび、プライべートクラウドで使えます
Cloud ShellにはTerraformがインストール済みです
右側の構成ファイルの例では、まずプロバイダとしてGoogleを指定しています
その下にGCEインスタンスとそのディスクの構成が記述されています
outputセクションでは、プロビジョニング済みインスタンスのIPアドレスの取得を指定しています
