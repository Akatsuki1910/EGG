クライアントはHTTPサービスにHTTPリクエストという形でアクセスします
HTTPリクエストは３つの部分からなります
リクエスト行、ヘッダー変数、リクエスト本文です
リクエスト行に含まれるのはGET、POST、PUTなどのHTTP動詞と、リクエスト対象のURI、プロトコルバージョンです
ヘッダー変数の値はKey-Valueペアです
標準の変数もあり、たとえばUser-Agentを使うとリクエストを送信したSWエージェントを受信側が識別できます
メッセージ形式や推奨されるメッセージ形式に関するメタデータも、HTTPSベースのRESTサービスの場合はここに格納されます
カスタムヘッダーも追加できます
リクエスト本文にはサーバーに送信するデータが含まれ、それを送信するPOSTやPUTなどのHTTPコマンドに対してのみ意味を持ちます
HTTPクライアントのテキストベースのメッセージの２つの例を見てください
最初の例は、HTTP バージョン1.1を使用したURL /へのHTTP GETリクエストです
リクエストヘッダー変数が１つあり、名前は“Host”、値は“pets.drehnstrom.com”です
２番目の例はHTTPバージョン1.1を使用したURL /addへのHTTP POSTリクエストです
リクエストヘッダー変数は３つあります
“Host”、JSONに設定された“Content-Type”、35バイトに設定された“Content-Length”です
リクエスト本文に含まれるJSONドキュメント、"name":"Noir","breed":"Schnoodle"は追加するペットの表現です
リクエストに含まれるHTTP動詞は、リソースに対して実行するアクションをサーバーに指示します
HTTPにはプロトコルとして９個の動詞がありますが、RESTでは通常ここに挙げた４個のみが使用されます
GETでは、リソースを取得します
POSTでは、新しいリソースの作成をリクエストします
サービスはそのリソースを作成し、通常はその新しいリソース用に生成した一意のIDをクライアントに返します
PUTでは、新しいリソースを作成するか既存のリソースに変更を加えます
PUTリクエストはべき等であり、クライアントからサービスに対するリクエストの回数に関係なく、リソースに与える影響は常にまったく同じです
最後のDELETEリクエストでは、リソースを削除します
HTTPサービスは、HTTPで定義された標準の形式でレスポンスを返します
HTTPレスポンスは３つの部分からなります
レスポンス行、ヘッダー変数、レスポンス本文です
レスポンス行にはHTTPバージョンとレスポンスコードがあります
レスポンスコードは、およそ100を単位に分割されています
200番台のコードはOKを意味します
たとえば、200はOKで201はリソースが作成されたことを意味します
400番台のコードはクライアントリクエストのエラーを意味します
たとえば、403はリクエスト送信者に権限がないためアクセスが拒否されたこと、404はリソースが見つからないことを意味します
500番台のコードはサーバーエラーが発生してリクエストを処理できないことを意味します
たとえば、500は内部サーバーエラー、503は一般的には過負荷によりサーバーを使用できないことを意味します
レスポンスヘッダーは一連のKey-Valueペアです
たとえばContent-Typeは、レスポンス本文に含まれるコンテンツのタイプを受信者に知らせます
レスポンス本文には、リクエスト対象のリソースの表現がContent-Typeヘッダーで指定されたJSON、XML、HTMLなどの形式で含まれます
ここに示すガイドラインでは、APIでの整合性の実現に焦点を当てています
個々のリソースには単数名詞を使用し、コレクションやセットには複数名詞を使用します
URLの例として、/petについて考えてみます
この場合、URI /pet/1に対するGETリクエストではID“１”のペットが返されるのに対し、GET/petsではすべてのペットが返されます
GET /getPetsのようなURIは使用しないでください
URIでは、リソースに対するアクションではなくリソースを参照します
アクションは動詞で参照します
URIでは大文字と小文字は区別されず、URIにはバージョン情報が含まれます
サービスを図に描くとわかりやすくなります
この図は、Petsというリソースにアクセスできるサービスを示しています
このリソースは“Pet”で表されます
このサービスを介して、リソースに対するリクエストを送ると、Petの表現が１つ以上返されます
