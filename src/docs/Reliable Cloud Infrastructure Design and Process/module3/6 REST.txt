RESTとHTTPをベースにサービスを疎結合するマイクロサービスの設計を見ていきましょう
マイクロサービスベースのアプリの重要な側面の１つは、サービスのそれぞれを互いに完全に独立してデプロイできることです
この独立性を確保するには、各サービスでクライアントとのコントラクトを明確に定義してバージョニングします
つまり他のサービスやアプリとのコントラクトです
バージョニングされたコントラクトに依存する他のサービスがなくなるまでは、各マイクロサービスはその特定のコントラクトに従う必要があります
他のマイクロサービスのロールバック先のバージョンで、以前のコントラクトが必要になる場合があるため、非推奨ポリシーやサービス終了ポリシーでこの点を考慮することが重要です
厳格にバージョニングされたコントラクトの管理は、安定したマイクロサービスベースのアプリを提供したい組織にとって最も大きな課題でしょう
詳しく見ていくと、サービスはJSONやXMLなどのテキストベースのペイロードを使用してHTTPSで通信し、GETやPOSTなどのHTTP動詞でリクエストしたアクションの意味がわかるようにしています
そのためクライアントがサービスを使用するのに必要な情報は、URI、リクエスト、レスポンス形式だけです
RESTアーキテクチャは疎結合をサポートします
RESTはRepresentational State Transferを表し、プロトコルに依存しません
HTTPが最もよく使われるプロトコルですが、gRPCも広く使用されています
RESTは疎結合をサポートしますが、その疎結合を維持するためには依然として強固なエンジニアリングプラクティスが必要です
その出発点は、厳格なコントラクトを定義することです
HTTPベースの実装ではOpenAPIなどの標準を使用でき、gRPCにはプロトコルバッファがあります
疎結合を維持するためには、コントラクトの下位互換性を維持し、特定のユースケースやクライアントではなくドメイン中心にAPIを設計することが重要です
ユースケースやクライアントを中心にすると、新たにユースケースやアプリを作成するたびにプロトコルに関係なくその用途向けのREST APIが別途必要になります
リクエスト/レスポンス処理が一般的なユースケースですが、ストリーミングが必要な場合はgRPCなどのストリーミング対応のプロトコルを選択する必要があります
リソースはURIまたはエンドポイントで識別されます
リクエストへのレスポンスとしては、リソース情報の不変の表現が返されます
RESTアプリでは、一貫して統一されたインターフェースを使用して、他のリソースにもリンクできます
Hypermedia as the Engine of Application StateはRESTのコンポーネントで、これを使用するとクライアントが事前にサービスの詳細を知る必要がありません
他のリソースへのリンクがレスポンスの一部として提供されるためです
API設計を開発プロセスの一部にすることが重要です
理想的には一連のAPI設計ルールを設定して、REST APIでインターフェースを統一できるようにします
たとえば、各サービスでのエラー報告を一貫させて、URLの構造やページングの使用も一貫させます
パフォーマンスのためのキャッシングや、不変リソースを目的としたリソース最適化も検討します
RESTでは、クライアントとサーバーがリソースの表現を受け渡します
ここで言うリソースとは、情報の抽象的な概念です
リソースの表現は、リソース情報をコピーしたものです
たとえば、犬を表すのはリソースです
特定の犬に関する実際のデータがリソースの表現です
たとえば、シュヌードルのNoirや、雑種のBreeといったデータで、１つのリソースに対して２種類の表現があることになります
リソースにURIを使ってアクセスし、そのリソースに対してリクエストを送ると、そのリソースの表現が返されます
通常はJSON形式です
単一のアイテムでも、複数のアイテムでも、リソースとしてリクエストできます
パフォーマンスの点で言うと、個別のアイテムではなく、複数のアイテムをまとめて返す方が効率的です
このようなタイプの操作は、バッチAPIとも呼ばれます
クライアントとサービス間では、リソースの表現に標準のテキストベース形式を使用します
一般的なテキストベース形式はJSONですが、XMLも使用できます
公開APIまたは外部APIの場合は、JSONが標準です
内部サービスの場合、特にパフォーマンスが重要な場合にはgRPCも使用できます
