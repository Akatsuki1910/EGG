マイクロサービスのベストプラクティスを紹介します
Twelve-Factor AppはウェブまたはSaaSアプリを構築する際のベストプラクティス一式です
Twelve-Factorの設計ではアプリの構成要素を分離でき、分離した要素を継続的デプロイを使って個別にデプロイし、シームレスにスケールアップ/ダウンできます
この設計原則に従うと、さまざまな環境へのポータビリティも最大化できます
これらの特性はプログラミング言語や、SWスタックに依存しないため、Twelve-Factorの設計はさまざまなアプリに適用できます
具体的な内容を確認しましょう
最初の要素はコードベースです
コードベースはGitなどのバージョン管理で追跡する必要があります
Cloud Source Repositoriesは多機能のプライベートリポジトリです
２番目の要素は依存関係です
Twelve-Factor Appの依存関係には主に２つの考慮事項があります
依存関係の宣言と依存関係の分離です
依存関係は明示的に宣言し、バージョン管理に保存する必要があります
たとえば、JavaではMaven、PythonではPipです
アプリとその依存関係を分離するには、両者をコンテナにパッケージ化します
Container Registryにイメージを保存すれば、きめ細かくアクセスを制御できます
３番目の要素は構成です
どのアプリにも、テスト、本番、開発などの環境ごとに構成があります
この構成はコードの外部に保持する必要があり、通常は環境変数に保持してデプロイの柔軟性を確保します
４番目の要素はバッキングサービスです
DB、キャッシュ、メッセージサービスなどいずれのバッキングサービスもURLでアクセスし、構成で設定する必要があります
バッキングサービスは基盤となるリソースを抽象化したもので、バッキングサービスを交換することで簡単に別のものを実装できるようになります
５番目の要素はビルド、リリース、実行です
ソフトウェアのデプロイプロセスは、ビルド、リリース、実行という３つの異なるステージに分ける必要があります
各ステージでは一意に識別できるアーティファクトが生成されるようにします
ビルドでは、ソースコードからデプロイパッケージを作成します
どのデプロイパッケージもランタイム環境の構成とビルドを組み合わせた、特定のリリースにリンクする必要があります
こうするとロールバックが容易になり、本番環境のデプロイ履歴の監査証跡に対応できるためです
実行ステージでは単にアプリを実行するだけです
６番目の要素はプロセスです
アプリは１つ以上のステートレスプロセスとして動作します
状態が必要な場合は、このモジュールで前述した状態管理の手法を使用する必要があります
たとえば、サービスごとに独自のデータストアとキャッシュを使用し、Memorystoreなどでサービス間で共通するデータをキャッシュして共有します
７番目の要素はポートバインディングです
サービスはポート番号を使用して公開します
アプリには、ウェブサーバーがバンドルされるため、Apacheなどの独立したサーバーは必要ありません
Google Cloudではこうしたアプリを、プラットフォームサービスのCompute Engine、GKE、App Engine、Cloud Runなどにデプロイできます
８番目の要素は同時実行です
アプリは、新しいプロセスの開始時にスケールアウトし、需要や負荷に応じてスケールバックできる必要があります
９番目の要素は廃棄可能性です
アプリは、その基盤となるインフラよりも信頼できるものにする必要があります
つまり、基盤となるインフラで発生した一時的な障害に対処して、正常に終了し迅速に再起動できることが重要です
必要に応じてすばやくスケールアップ/ダウンして、リソースを取得、解放できる必要もあります
10番目の要素は開発/本番環境の同一性です
本番で使用するのと同じ環境を、開発、テスト、ステージングで使用できるようにします
これには、IaCとDockerコンテナで簡単に対処できます
環境変数を使うと、環境を一貫して迅速にプロビジョニングして構成できます
Google Cloudには、ワークフローをビルドして、環境の一貫性を維持するためのツールが用意されています
たとえばCloud Source Repositoriesや、Cloud Storage、Container Registry、Terraformなどです
Terraformは 各Google CloudサービスのAPIを使用してリソースをデプロイします
11番目の要素はログです
ログを見れば、アプリの状態を把握できます
アプリのコアロジックからログの収集、処理、分析を切り離すことが重要です
それにはログを標準出力に書き込み、単一のソースに集約する必要があります
これは特に、動的スケーリングが必要なアプリをパブリッククラウドで実行する際に役立ちます
ログの保存場所を管理したり、多くはエフェメラルの分散VMやコンテナからログを収集したりする際のオーバーヘッドがなくなるからです
Google Cloudには、ログの収集、処理、構造化分析に役立つ一連のツールが用意されています
12番目の要素は管理プロセスです
通常１回限りの管理プロセスは、アプリから分離する必要があります
プロセスを自動化して再現可能にし、手動で行われないようにします
Google Cloudにはそのためのオプションが多数用意されています
たとえば、GKEのcronジョブ App EngineのCloud Tasks、Cloud Schedulerなどです
