Stackdriverについて大まかに理解できたところで、Monitoringを見てみましょう
サイト信頼性エンジニアリング（SRE）の基礎となるMonitoringは、Googleにとって重要な機能です
SREとはソフトウェアエンジニアリングの側面を運用に応用する規範のことで、信頼性が高く極めてスケーラブルなソフトウェアシステムの構築を目的としています
この規範によってGoogleは世界最大級のソフトウェアシステムを構築し、デプロイ、モニタリング、保守することができます
SREの詳細については、GoogleのSREチームメンバーが作成した無料ガイドをご覧ください
この動画のリンクセクションでご確認いただけます
Stackdriverはリソースのデプロイ後にモニタリングを動的に構成します
またインテリジェントなデフォルト設定により、モニタリング活動に必要なグラフを簡単に作成できます
指標、イベント、メタデータなどのデータを取り込めば、プラットフォーム、システム、アプリの指標をモニタリングできます
ダッシュボード、グラフ、アラートを使用して、このデータから分析情報を生成できます
たとえば稼働時間チェックとヘルスチェックを構成して測定し、メールでアラートを送信できます
ワークスペースは、Monitoringでモニタリング情報と構成情報を保持するルートエンティティです
各ワークスペースでは、１つ以上のGCPプロジェクトと任意の数のAWSアカウントを含む１～100個のプロジェクトをモニタリングできます
ワークスペースの数に制限はありませんが、GCPプロジェクトとAWSアカウントを、複数のワークスペースのモニタリング対象にはできません
ワークスペースには、対象プロジェクトで使用するカスタムダッシュボード、アラートポリシー、稼働時間チェック、通知チャンネル、グループ定義が含まれています
ワークスペースは、モニタリング対象プロジェクトから指標データにアクセスできますが、指標データとログエントリは個々のプロジェクトに残ります
ワークスペースで最初にモニタリングされるGCPプロジェクトは、ホスティングプロジェクトと呼ばれ、ワークスペースの作成時に指定する必要があります
このプロジェクトの名前がワークスペースの名前になります
AWSアカウントにアクセスするには、AWSコネクタを保持するように、GCPのプロジェクトを構成します
ワークスペースでは、すべてのGCPプロジェクトを１か所でモニタリングできるため、単一の管理画面で複数のGCPプロジェクトやAWSアカウントのリソースを確認できます
ワークスペースにアクセスできるどのStackdriverユーザーも、デフォルトで全データにアクセスできます
つまりプロジェクトで１人のユーザーにStackdriverロールを割り当てると、そのワークスペースがモニタリングする全プロジェクトに等しく適用されます
プロジェクトごとに異なるロールを付与して、データの可視性をコントロールするには、プロジェクトのモニタリングを別々のワークスペースに割り当てることを検討します
Monitoringを使用すると、モニタリングする指標のグラフを含むカスタムダッシュボードを作成できます
たとえばインスタンスのCPU使用率、インスタンスが送受信したパケット、またはバイト数、インスタンスのファイアウォールによってドロップされた、パケットまたはバイト数を示すグラフを作成できます
つまりこの図のように、グラフによってVMインスタンスの使用率とネットワークトラフィックを可視化します
これらのグラフは、ノイズを除去するフィルタ、時系列の数を減らすグループ、複数の時系列をまとめる集計機能を使ってカスタマイズできます
サポートされている指標の一覧は、この動画にリンクされているドキュメントでご確認いただけます
グラフは非常に便利なものですが、そこで提供される分析情報はグラフを見ないと確認できません
もし夜中や週末にサーバーがダウンしたら、どうなるでしょう
サーバーの利用状況や十分な容量や帯域幅が確保されているかを判断するために、ずっとダッシュボードを見ているわけにはいきません
そこで特定の条件が満たされたときに通知するアラートポリシーの作成をおすすめします
たとえばこの図のように、VMインスタンスの下り（外向き）ネットワークが、特定の期間にわたって指定のしきい値を超えたときに警告するアラートポリシーを作成できます
条件が満たされたときに、問題をトラブルシューティングできるよう、メールやSMSなどのチャンネルで自動的に通知を受け取ることができます
Stackdriverの使用状況をモニタリングして、料金のしきい値に近づいたら警告するアラートポリシーを作成することも可能です
詳しくは、この動画のリンクセクションをご確認ください
これはアラートポリシーの作成例です
左側にsummer01インスタンスのHTTPチェック条件が示されており、右の[ドキュメント]の内容でカスタマイズされたメールが送信されます
アラート作成時のベストプラクティスを紹介します
アラートは必ずしも原因ではなく、症状に対して送信することをおすすめします
たとえばDBのクエリの失敗をモニタリングすることで、そのDBがダウンしているかどうかを特定します
次にメールやSMSなど、複数の通知チャンネルを使用します
これはアラート戦略における単一障害点を防止するのに役立ちます
また通知の受信者のニーズに合うように、必要なアクションや検証を要するリソースを示して、アラートをカスタマイズします
最後にノイズは避けましょう
時間経過とともに、アラートが解除されがちになるからです
特にモニタリングアラートは、実用的なものになるように調整し、むやみにアラートを設定しないでください
この図のように、世界各地で公共サービスの可用性をテストするよう、稼働時間チェックを構成できます
稼働時間チェックの種類はHTTP、HTTPS、TCPのいずれかに設定できます
チェック対象となるリソースは、App Engineアプリ、Compute Engineインスタンス、ホストのURL、AWSインスタンス、AWSロードバランサなどです
稼働時間チェックごとにアラートポリシーを作成して、各グローバルロケーションのレイテンシを表示できます
これはHTTP稼働時間チェックの例です
リソースは１分ごとにチェックされて、10秒間のタイムアウトがあります
この期間にレスポンスがないと、稼働時間チェックは失敗とみなされます
ここまでは100%の稼働時間で停止もありません
Monitoringでは、Monitoringエージェントを使わなくても、CPU使用率、一部のディスクトラフィック指標、ネットワークトラフィック、稼働時間情報などの指標にアクセスできます
ただし追加システムリソースやアプリサービスにアクセスするには、Monitoringエージェントをインストールします
このエージェントは、Compute EngineとEC2のインスタンスに対応しています
エージェントをインストールするコマンドは２つあり、これらは起動スクリプトに含められますが、Linuxを実行しているVMインスタンスがワークスペースによってモニタリングされ、エージェントに対する適切な認証情報がインスタンスに設定されていることが前提です
Monitoringの標準指標がニーズに合わない場合は、カスタム指標を作成できます
たとえばユーザー数の上限が50人のゲームサーバーがあるとします
スケーリングイベントのトリガーに使う指標インジケーターですが、インフラストラクチャの観点からは、ユーザー数とある程度相関する値として、CPU負荷やネットワークトラフィックの負荷を利用することが考えられます
しかしカスタム指標を使えば、現在のユーザー数をアプリから直接Stackdriverに渡すことができます
カスタム指標の作成を開始するには、この動画のリンクセクションをご覧ください
