このラボでは、アプリをApp Engineにデプロイした後、バグをコードに追加してアプリが機能しない状態にし、Stackdriver Error Reportingで問題を特定して分析し、Stackdriver Debuggerで根本原因を判別しました
最後にコードを変更して問題を修正し、Stackdriverで結果を確認しました
これらのツールは、すべてGCPに統合されているため、コードとそれに伴うトラブルシューティングに集中できます
ラボのチュートリアルは引き続き参照できますが、GCPのUIは変更されることがあり、実際の環境と若干異なる場合があります
「Stackdriverによるエラー報告とデバッグ」
ラボのチュートリアルへようこそ
Qwiklabs提供のユーザー名とパスワードでGCP Consoleにログインした状態です
Cloud Shellを起動します
[ナビゲーションメニュー]の表示/非表示はこのアイコンで切り替えられます
まずはローカルフォルダを作成し、App EngineにデプロイするHello Worldアプリを取得します
Cloud Shellでローカル開発サーバーを使用して、このアプリを実行するために、次のコマンドを実行します
アプリが実行されて、プレビューできる状態になったら、[ウェブでプレビュー]>[ポート8080]で[プレビュー]をクリックします
Hello, Worldと表示されます
Ctrl+Cキーを押してアプリを停止すると、コマンドプロンプトに戻ります
これでアプリが動作することがわかりました
gcloud app deployを実行して、アプリをApp Engineにデプロイします
アプリのYAMLファイルも使います
デプロイするリージョンを指定します
15（us-west-2）を選択します
デプロイには１～２分かかります
完了したら、アプリをブラウザで確認しましょう
よければ「Y」を入力してデプロイを続行します
App Engineへのデプロイ時にCloud Storageに４つのファイルがアップロードされています
サービスのトラフィック分割も行われています
アプリのデプロイ状況に関する詳細情報が多数表示されています
次に実行するコマンドがここに提示されています
gcloud app browseです
URLが示されるのでクリックすると、Hello, Worldと表示されます
Cloud Shellでローカルで実行したときと同じ結果です
ここでラボの進行状況を確認できます
10点中５点を獲得し、App Engineにアプリが適切にデプロイされたことを示す
緑のチェックが表示されるはずです
Cloud Shellに戻って、念のためにCtrl+Cキーを押します
cat main.pyを実行して、ファイルの内容を確認します
webapp2がインポートされる点に注目してください
アプリに必要なものです
次はsedストリームエディタを使用します
バグを埋め込むために、webapp2をwebapp22に置き換えます
webapp22は存在しないので、アプリでエラーが発生するはずです
webapp2がwebapp22に置き換えられていることを確認して、Enterキーを押します
置換を確認するにはもう一度ファイルの内容を確認します
アプリを変更したので、App Engineに再デプロイします
quietフラグを使用して、対話型プロンプトが表示されないようにすると続行を確認したり、「Y」と入力する必要がなくなります
デプロイが完了すると、実行すべきコマンドが出力されます
gcloud app browseです
このURLをクリックしても機能しません
webapp22は存在しないので、エラーが発生しています
必要に応じてCtrl+Cキーを押しますが、今回は不要です
ラボの理解度を確認する問題が表示されています
ここでは省略しますが、学習内容を理解できているか確認してください
[進行状況を確認]をクリックすると、５点が追加され、タスク１の最後には満点を獲得できます
タスク２と３は説明です
ではStackdriver Error Reportingについて見ていきましょう
追加したバグを確認できるはずです
Error Reportingに移動します
ありました
先ほどと同じエラーが表示されています
webapp22というモジュールは存在しないことが示されています
[自動再読み込み]をクリックします
Cloud Shellでgcloud app browseを実行してアプリを見直します
URLをクリックすると、またエラーが発生します
このリンクを数回クリックし、エラーが複数発生して自動で再読み込みされることを確認します
２つのエラーが確認できます
５つになりました
１、２、３、４、５個の内部サーバーエラーが発生し、Stackdriver Error Reportingに５と表示されています
このエラーをクリックすると、エラーが発生した回数や日時などの詳細がグラフに表示されます
[スタックトレースの例]を見てみましょう
[解析済み]をクリックすると、誤りのある行が表示されるのでとても便利です
これをクリックすると、Stackdriverデバッグページが表示されて、ログを確認しながら修正できます
実際のログが表示されます
エラーが発生するたびにここに追加されます
戻ってコードを修正しましょう
webapp22をwebapp2に置き換えます
プロンプトが表示されないように、quietフラグを指定してアプリを再デプロイします
再デプロイできました
最初のデプロイは少し時間がかかりましたが、以降は時間が短縮されます
ブラウザのページで確認すると、正しく修正されたので、Hello, Worldと表示されます
Debuggerに戻ってもエラーは増えていません
Error Reportingに戻りましょう
コードを修正したのでエラーは５つのままです
このようにStackdriverを使用して、アプリの正確な状況を把握できます
表示されたエラーをクリックすれば、アプリを実行したままデバッグできます
このチュートリアルがお役に立てば幸いです
