トランザクションの整合性が必要ない場合は、Cloud Bigtableの使用を検討できます
BigtableはPB規模にまでスケールするフルマネージドNoSQLデータベースで、レイテンシはごくわずかです
スループットに応じて円滑にスケールし、学習により特定のアクセスパターンに適応します
BigtableはGoogleの主要サービスの多くで、採用されています
検索、アナリティクス、マップ、Gmailなどです
Bigtableはデータ操作にも、データ分析にも優れたツールです
IoT、ユーザー分析、財務データ分析などで力を発揮します
その理由は読み取り/書き込みの低レイテンシと高スループットです
機械学習アプリにも最適なストレージエンジンです
Bigtableはよく使われているビッグデータツール
たとえば、Hadoop、Dataflow、Dataprocと簡単に統合できます
また、オープンソースかつ業界標準のHBase APIもサポートしています
そのため開発チームが簡単に導入できます
DataflowとDataprocはコースシリーズの後半で取り上げます
HBase APIの詳細はこの動画のリンクセクションをご覧ください
Bigtableのデータは大規模に拡張可能なテーブル、つまり並べ替えられたKey-Valueマップに格納されます
通常、テーブルを構成する各行は単一のエンティティを表し、各列は各行の個々の値を格納します
各行は単一の行キーでインデックスに登録され、通常、相互に関連する列は列ファミリーとしてグループ化されます
各列は列ファミリーと列修飾子の組み合わせによって識別されます
列修飾子は特定の列ファミリー内での一意の名前です
行と列が交差する場所には、タイムスタンプの異なる複数のセル（バージョン）を格納できるので、保存されたデータの経時的な変更を記録できます
Bigtableテーブルはスパースです
データが格納されていないセルは、領域を消費しません
ここに示した例は、米国大統領の架空のソーシャルネットワークです
各大統領は他の大統領の投稿をフォローできます
要点を説明しましょう
テーブルに含まれる列ファミリーは、1つ（Follows）だけです
このファミリーには複数の列修飾子が格納されています
列修飾子がデータとして使用されています
この設計は、Bigtableテーブルのスパース性と、データの変更に応じて新しい列修飾子を追加できるという点を活かしたものです
ユーザー名が行キーとして使用されています
ユーザー名がアルファベット全体に均等に分散していれば、データアクセスはテーブル全体である程度均一に分散されることになります
この図はCloud Bigtableの全体的なアーキテクチャを簡素化したものです
フロントエンドサーバープールとノードで行われる処理が、ストレージから分離されて扱われます
Bigtableテーブルは連続する行ブロック（タブレット）として共有されるため、クエリの負荷が分散されます
HBase APIの使用者向けに言うならタブレットはHBaseリージョンに相当します
タブレットは、GoogleのファイルシステムColossusにSSTable形式で保存されます
SSTableは、永続的な順序付きのキーから値への不変マップとなっており、キーと値はどちらも任意のバイト文字列です
前述のように、Bigtableは学習して特定のアクセスパターンに適応します
特定のBigtableノードが特定のデータに頻繁にアクセスしている場合、Bigtableはインデックスを更新して、他のノードでワークロードを均等に分散できるようにします
スループットは線形にスケールするので、ノードを１つ追加するごとに最大数百のノードまでスループットのパフォーマンスが線形にスケールします
まとめです
１TBを超える構造化データを保存する必要がある場合、大量の書き込みが必要な場合、10ミリ秒未満の読み取り/書き込みレイテンシで強整合性を確保する必要がある場合、HBase API対応のストレージサービスが必要な場合は、Bigtableの使用を検討します
以上の要件がなく、適切にスケールダウンするストレージサービスが必要な場合は、Cloud Firestoreの使用を検討します
スケーリングに関して言うと、作成できる最小のBigtableクラスタは３ノードからなり、１秒あたり３万の操作を処理できます
処理可能な状態のノードには、料金が発生します
アプリで使われていなくても発生するので要注意です
