このラボではさまざまな特徴を持つ、複数のタイプのVMインスタンスを作成しました
具体的には、管理用の小規模なユーティリティVM Windows、VM、カスタムLinux VMを作成しました
さらに、Windows VMとLinux VMの両方にアクセスし、作成したすべてのVMを削除しました
費用削減を目的としたソリューションのプロトタイピングでは、一般に小規模なVMから始めて本番環境に移行する準備ができたら容量に基づいて大規模なVMに交換します
可用性のために冗長性を組み込む場合は、パフォーマンス要件を満たせるように容量を余分に割り当ててください
標準タイプの機能がアプリの要件に合わない場合は、カスタムVMの使用を検討してください
ラボのチュートリアルは引き続き参照できますが、GCPのUIは変更されることがあるため、見た目が少し異なる場合があります
GCP Consoleで[Compute Engine]に移動し、[VMインスタンス]を選択します
[作成]をクリックします
まずは名前を定義しますが、こちらの小さい疑問符にカーソルを合わせると、名前の作成に関する制限事項の詳細を確認できます
utility-vmという名前にします
デモで簡単に説明したオプションをいくつか指定していきます
リージョンとゾーンを選択できます
ゾーンをラボ指定の1cに変更します
マシンタイプは、さまざまなオプションから選択できます、vCPUが４個のマシンにスケールアップした場合と、共有コアマシンのmicroの場合で費用が変わることがわかります
このように費用はかなり大きく異なります
残りの設定はそのままにして[作成]をクリックします
マシンが稼働したら、VMのさまざまな詳細情報を確認するために、[VMインスタンス]に移動して、CPUプラットフォームや可用性ポリシーなどを見ていきます
始めましょう
utility-vmが実行状態になったのでクリックします
CPUプラットフォームを確認します
ここです
[編集]をクリックすると、変更できないことがわかります
インスタンスの実行中には行えない操作だからです
ファイアウォールルールの変更や、ネットワークタグの追加などの操作は、インスタンスの実行中でも行えます
場合によってはプロパティ変更のために、インスタンスを停止する必要があります
インスタンスを削除しない限り、変更できないものもあります
たとえばネットワークインターフェースです
ネットワークインターフェースが複数あると、インスタンスの再作成が必要な場合があります
ブートディスクを残して後で再アタッチすることをおすすめします
次は可用性ポリシーを確認しましょう
下にスクロールします
[ホストメンテナンス時]は、デフォルトで[VMインスタンスを移行（推奨）]に設定されていますが、[VMインスタンスを終了]にもできます
終了したインスタンスを自動で再起動するように設定することも可能です
ここまで各種オプションについて簡単に説明しました
[キャンセル]をクリックします
この後はVMログを確認します
[詳細]のページでは、使用可能なモニタリングオプションに関する情報も確認できます
[モニタリング]をクリックするとCPUに関する情報が表示されます
このインスタンスはほとんど実行されていないので、データがありませんが、ネットワークのバイトやパケット、ディスクI/Oなどの情報が表示されます
[詳細]に戻ってStackdriver Loggingを確認してみます
これは別のUIです
表示された個々のログを調べることができます
こちらの[表示設定]で、すべて展開してさまざまなログを詳しく調べられます
それぞれのログをさらに展開すると、詳細が表示されます
ここで使用されるStackdriver Loggingについては、このシリーズの後半のコースで機能を説明します
ロギングとモニタリングの両方について詳しく学習できます
タスク２に進んで、WindowsのVMを作成しましょう
ナビゲーションメニューで、[Compute Engine]、[VMインスタンス]を選択します
別のインスタンスを作成します
名前を定義します
windows-vmとします
今回は別のリージョンとゾーンを選択します
europe-west2にしましょう
ゾーンは2-aです
大き目のマシンを選択します
vCPUが２個でメモリが7.5GBのマシンにしましょう
ブートディスクも変更します
デフォルトではLinuxマシンが指定されますが、Windowsマシンを作成するために変更します
具体的にはラボの手順で、Windows Server 2016 Datacenter Coreイメージが指定されています
下にスクロールしていくと、指定のイメージがここにあります
ブートディスクを変更してIOPSも増やしたいので、SSDを選んでサイズも大きくします
[選択]をクリックすると先ほどと同じように、マシンの費用やディスクの費用に反映されます
今回はプレミアムイメージを選択したので、新しく追加されています
これはそのイメージの使用に関連する費用です
費用の合計と内訳をここで確認できます
もう一つ指定するのは、特定のトラフィックの許可です
HTTPとHTTPSのトラフィックを許可します
これによりネットワークタグが作成されて、ファイアウォールルールが作られます
これでTCPプロトコルのポートで、トラフィックを有効にできます
[作成]をクリックしてインスタンスを作成しましょう
インスタンスが稼働したことは、[接続]列でわかります
現在はLinuxマシン用の[SSH]ボタンが表示されていますが、リモートデスクトッププロトコルを表す[RDP]が表示されるはずです
それを使ってWindowsマシンにアクセスします
ここで重要なことはユーザー名とパスワードを設定して、承認されたユーザーのみがマシンにアクセスできるようにすることです
[RDP]ボタンが表示されました
次はこのマシンをクリックして、Windowsパスワードを設定します
こちらをクリックして、[Windowsパスワードを設定]を選択することもできます
この方法でやってみましょう
ユーザー名が表示されます
このラボアカウントのユーザー名です
このユーザー名のままで、[設定]をクリックします
しばらくすると、パスワードが表示されます
このパスワードをコピーすれば、RDP接続でアクセスできます
このラボでは扱いませんが、RDPクライアントを使用する場合は、Chromeの拡張機能としてインストールできます
これを使ってインスタンスにアクセスし、WindowsのVMで必要な設定を行えます
これを閉じてタスク３に進みましょう
次はカスタムVMの作成です
もう一度[インスタンスを作成]を選択し、名前をcustom-vmと定義します
リージョンとゾーンの設定はラボの手順どおり、us-west1-bを指定します
今回は特定のマシンタイプを選択するのではなく、[カスタム]を選んで、適切なコア数とメモリを定義します
６個のvCPUが必要と仮定しましょう
このようにスケーリングできますが、選択できるのは96までです
６を指定します
メモリが自動的にスケーリングされ、選択したCPUに応じた範囲が表示されます
[メモリを拡張する]オプションを使えば、39より多くできます
ご覧のように624まで増えました
これは別のオプションなので、スライドで説明します
ここでは32を指定します
スライダーを使わず直接値を入力することもできます
これが費用にも反映されます
カスタムマシンの仕様が事前定義済みの２つのマシンタイプの中間あたりになる場合は注意が必要です
カスタムマシンは一般的に料金が高めになります
したがってカスタムマシンに近い仕様の標準マシンがあれば、そちらを検討してください
マシンの稼働時間が24時間を超えると、適正サイズが提案されるので、マシンが小さすぎるか大きすぎるかがわかります
[作成]をクリックします
マシンが稼働したらSSHで接続して、コマンドを実行します
これでラボは完了です
新しいプロジェクトでは、右の列にスタートガイドが表示されます
Qwiklabsで生成されたプロジェクトを使用しているので、トレーニングの間新規プロジェクトとしてこのガイドが表示されます
必要に応じてご利用ください
今は閉じます
それでは、VMが稼働したのでSSHで接続します
接続できたらfreeコマンドを実行して、未使用のメモリ、使用済みのメモリ、スワップ領域の情報を表示します
“free”と入力します
このようにマシンで行ったメモリの選択内容が表示されます
インストールされているRAMの詳細も確認できます
詳細が表示されました
はい
プロセッサの数を確認してみます
６個のはずです
確かに６と表示されています
CPU自体の詳細も確認できます
アーキテクチャ、バイトオーダー、モデルなどに関する情報が表示されます
作成したVMに関するこうした情報をすべて確認できます
詳細はドキュメントで確認することもできます
選択するリージョンとゾーンに応じて、選択可能なアーキテクチャとモデルは異なります
これでラボは終了です
VM、ユーティリティVM Windows、VM、カスタムVMを作成して、適用したカスタム設定がマシンの作成に実際に使用されていることをそのマシンでコマンドを実行して確認しました
