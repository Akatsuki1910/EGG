VMにアクセスするためにインスタンス作成者は、インスタンスへの完全なroot権限を有します
Linuxインスタンスの場合、作成者はSSHで接続でき、Cloud Consoleを使用して他のユーザーにSSHの使用を許可できます
Windowsインスタンスでは、作成者がCloud Consoleを使用してユーザー名とパスワードを生成できます
その後はユーザー名とパスワードを知っていれば誰でもRDPクライアントを使用してインスタンスに接続できます
これらはSSHとRDPの両方について必要なファイアウォールルールですが、前のモジュールで説明したデフォルトネットワークを使用している場合は、これらの定義は必要ありません
SSH認証鍵の管理と、Windowsインスタンスのパスワードの作成について詳しくは、この動画のリンクセクションをご覧ください
VMのライフサイクルにはさまざまなステータスがあります
ライフサイクルについて簡単に説明しますが、この図は繰り返し参照することをおすすめします
インスタンスの全プロパティを定義して[作成]をクリックすると、インスタンスはプロビジョニング状態になります
CPU、メモリ、ディスクなどのリソースがインスタンス用に予約されていますが、インスタンス自体はまだ実行されていません
次に、インスタンスはステージング状態に移行します
リソースが獲得されてインスタンスの起動の準備が整います
具体的にはCompute EngineによってIPアドレスが追加され、システムイメージの起動とシステムの起動が行われます
インスタンスが起動すると、事前構成済みの起動スクリプトが実行され、SSHまたはRDPアクセスが可能になります
これでインスタンスの実行中に複数の操作を行えます
たとえば、インスタンスの再起動を要求する代わりに同じゾーン内の別のホストにVMをライブマイグレーションできます
これによってVMの動作を妨げずに、Google Cloudでメンテナンスを行い、インフラの保護状態と信頼性を維持できます
インスタンスの実行中にVMを別のゾーンに移行したり、VMの永続ディスクのスナップショットを作成したりできます
システムイメージのエクスポートやメタデータの再構成も可能です
後ほど一部のタスクをラボで実践します
操作の中にはVMの停止が必要なものもあります
たとえばCPUを追加して、マシンをアップグレードする場合です
この状態になったインスタンスは、事前構成したシャットダウンスクリプトを実行し、最終的に終了状態になります
この状態から、インスタンスの再起動または削除を選択できます
再起動した場合はプロビジョニング状態に戻ります
VMをリセットすることもできます
これはパソコンのリセットボタンを押すのと似ています
この操作を行うと、マシンのメモリの内容がワイプされ、VMが初期状態にリセットされます
インスタンスはリセット後も実行状態のままになります
実行中のVMの状態はさまざまな方法で変更できます
Cloud Consoleやgcloudコマンドを使用する方法のほか、OSから再起動やシャットダウンなどを実行する方法もあります
インスタンスを再起動、リブート、停止、または削除する場合でもシャットダウンプロセスには約90秒かかるので注意が必要です
プリエンプティブルVMでは、30秒経過してもインスタンスが停止しない場合、Compute EngineからOSにACPI G3メカニカルオフ信号が送信されます
プリエンプティブルVMのシャットダウンスクリプト記述の際はご注意ください
先ほど説明したように、Compute Engineではメンテナンス時にアプリの中断が発生しないように、VMを別のホストにライブマイグレーションできます
VMの可用性ポリシーでは、このようなイベント時のインスタンスの動作を指定できます
デフォルトでは、インスタンスがライブマイグレーションされますが、メンテナンス時にインスタンスを終了するよう設定を変更することもできます
クラッシュやメンテナンスが原因でVMが終了した場合、インスタンスはデフォルトで自動的に再起動しますが、この動作も変更できます
これらの可用性ポリシーはインスタンス作成時でもインスタンス実行中でも、[自動再起動]と[ホストメンテナンス時]のオプションを使って設定できます
ライブマイグレーションについて詳しくはこの動画のリンクセクションをご覧ください
OSアップデートはインフラ管理の一部です
Windows VMのフリートのアップデートを管理する方法を確認しましょう
プレミアムイメージをプロビジョニングする場合は、イメージ関連の費用が発生します
この費用にはOSの使用だけでなく、OSのパッチ管理も含まれます
Google Cloudを使用して、OSのパッチ適用を簡単に管理できます
パッチを効果的に管理すれば、インフラを最新の状態に保って、セキュリティ脆弱性のリスクを軽減できます
ただし適切なツールを使用しないと、パッチ管理は手間のかかる作業になります
一連のCompute Engine VMインスタンス全体にOSのパッチを適用するには、パッチ管理を使用します
長時間実行されるVMでは、欠陥や脆弱性から保護するために定期的なシステム更新が必要です
OS Patch Managementサービスには、２つの主要コンポーネントがあります
１つ目のパッチコンプライアンスレポートはWindowsとLinuxディストリビューションのパッチステータスに関する分析情報を提供します
分析情報以外にVMインスタンスの推奨事項も見ることができます
またパッチデプロイはOSとソフトウェアパッチの更新プロセスを自動化します
パッチジョブがVMインスタンス全体で実行されて、パッチが適用されます
パッチ管理では複数のタスクを実行できます
パッチ承認の作成が可能です
特定のOSに適用できるすべてのアップデートから、システムに適用するパッチを選択できます
柔軟なスケジュール設定が可能です
パッチを実行するタイミングや、１回限りか繰り返しかを選択でき、高度なパッチ構成設定の適用が可能です
パッチ適用前後のスクリプトなどの構成を追加して、パッチをカスタマイズできます
これらのパッチジョブや更新を一元管理できます
VMを終了すると、メモリとCPUリソースに関する料金は発生しなくなりますが、接続されたディスクや予約されたIPアドレスに対しては課金されます
終了状態ではマシンタイプの変更など、ここに示すすべての操作を実行できますが、停止したVMのイメージを変更することはできません
なおこのすべての操作でVMの停止が必要なわけではありません
たとえば先ほど説明したように、VMの可用性ポリシーはVMの稼働中でも変更できます
