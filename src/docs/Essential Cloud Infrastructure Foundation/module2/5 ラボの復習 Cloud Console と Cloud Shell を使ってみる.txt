このラボではGCPでGCP ConsoleとCloud Shellを使用して、Cloud Storageバケットを作成しました
GCP ConsoleとCloud Shellはそれぞれ機能が異なります
たとえば、GCP Consoleでは構成作業のコンテキストを追跡できます
Cloud APIを使用して、システムの現在の状態から、どのオプションが有効か判断したり、より関連性の高い反復的な作業をユーザーに代わって実行したりできます
一方Cloud Shellでは詳細かつ精密な制御を行い、コマンドを通じて作業のスクリプトを記述したり自動化したりできます
しかし、ConsoleとCloud Shellのどちらかを選ぶ必要はありません
両方で一つの非常に柔軟かつ強力なインターフェースと考えてください
ラボのチュートリアルを使い続けてもいいですが、GCPのUIは変更されることがあるため、実際の画面と若干異なる場合があります
では、GCP Consoleについて詳しく見ていきましょう
最初に行うのはGCP Consoleを使用したバケットの作成です
ここではナビゲーションメニューを使用します
左上隅のこのアイコンです
[ストレージ]まで下にスクロールします
そして[ブラウザ]をクリックします
ここではバケットを作成したいので[バケットを作成]をクリックします
まず、名前を決める必要があります
この名前はグローバルに一意である必要があります
ここではQwiklabsのプロジェクトIDを使いましょう
では設定します
IDをコピーして貼り付けます
ここでは作成だけでなく、デフォルトのストレージクラスの変更も行えます
今は[マルチリージョン]に設定されています
これについては後述します
オブジェクトへのアクセスの制御や、暗号化の詳細設定も可能です
今回はこのままにして、[作成]をクリックします
ご覧のとおり、バケットが作成されました
ここにバケットのIDと名前が、表示されています
ではCloud Shellにアクセスしましょう
そのためには右上隅のこのボタンをクリックします
[Cloud Shellをアクティブにする]です
次に、Cloud Shellを開始するボタンをクリックします
このような画面が表示されます
この画面は展開したり、新しいタブで開いたりすることもできます
画面を小さくして、無駄なスペースを省くこともできます
このように、GCP Consoleでバケットを作成しました
次は、Cloud Shellでも、バケットを作成します
まず、ラボの手順からコマンドをコピーしてここに貼り付けます
コマンドのここの括弧内にバケット名があるので変更します
これも、グローバルに一意でなければなりません
なので、ここでもプロジェクトのIDをコピーして、ここに追加します
さらに、“-shell”を追加して、Cloud Shellから作成したことがわかるようにしましょう
コマンドはgsutilです
このコマンドはCloud Storageを表していて、mbはバケット作成のコマンドです
バケットはここに作成されていますね
GCP Consoleのバケット画面に戻ってみると、ここにバケットが２つあるので
両方で作成されたことがわかります
Cloud Shellの他の機能も見てみましょう
Cloud Shellでここにある３つの点をクリックすると、オプションがさらに表示されます
試しに[ファイルをアップロード]を選択するとブラウザが表示されます
このテキストファイルを選択して[開く]をクリックすると、アップロード中と表示された後終了したと表示されます
次に、lsコマンドを使用してそのファイルを一覧表示します
ここにありますね
READMEもすでにあります
ではこれをコピーして、先ほど作ったバケットに入れます
そのコマンドもラボの手順にあります
ではもう一度、Cloud Storageで作業します
gsutilコマンドを使います
コピーにはcpを使います
MyFile.txtというファイル名を入力します
そしてそれを、Cloud Storageのバケットに入れます
先ほど作った２つのうちのどちらでもかまいません
Cloud Shellで作った方を選びましょうか
そこに貼り付けます
ファイルがコピーされたというメッセージが出ます
バケットを開くと、ファイルがあることがわかります
ファイルには何も入っていないのでこのサイズです
では、先へ進みます
Cloud Shellを閉じて、他の作業を行いましょう
ラボのタスク５ではCloud Shellで永続状態を作成します
Cloud Shellを開いて、使用可能なすべてのリージョンを一覧表示してみます
ここの一覧にあるgcloudコマンドを使います
gcloud compute regions listですね
そのリージョンの中からリージョンを１つ選んで、それを環境変数に格納します
では、ラボの手順からINFRACLASS_REGION= というコマンドを使いましょう
リージョンは、仮にus-central1とします
これをそこに貼り付けて格納します
これはechoコマンドで検証できます
このように格納されていることがわかりますね
さらに続けてここにフォルダを作成しましょう
そのためには、mkdirコマンドを使用します
次に構成ファイルを作成します
そして先ほど作成した環境変数をこのファイルに追加します
あともう一つ追加します
たとえばプロジェクトIDも格納できます
入れてみましょう
プロジェクトIDをコピーし、環境変数に格納します
そしてラボの手順から、コマンドを実行して、プロジェクトIDの値を構成ファイルの変数に追加します
そして、それをすべて検証して格納されていることを確認します
これが、環境変数を作成する方法です
Cloud Shellを開き直した場合でも簡単に再作成できます
ただし、sourceコマンドの発行はCloud Shellを開くたびに必要になります
そこで、.profileファイルを変更して、Cloud Shellでターミナルを開くたびに、sourceコマンドが自動的に発行されるようにしましょう
Cloud Shellを一旦閉じて再度開きます
やってみますね
閉じて、開き直します
そして、echoコマンドを再度貼り付けます
何も出力されていないのでまだコマンドは実行されていませんね
では、nanoを使って.profileファイルを変更しましょう
ファイルの最後に移動したいので、一番下まで行きますね
source infraclass/configを貼り付けて、.profileファイルを保存します
そして、終了します
では環境変数が表示されるかどうか検証しましょう
変数はPROJECT_IDですが今は入っていません
まだ再起動していないからです
再起動するとプロファイルが動作します
再起動するには、Cloud Shellを閉じて、再度開きます
では、検証してみましょう
制限値が表示されました
これは.profileファイルを編集したからです
このラボでは、GCP Consoleを使ってストレージバケットを作成しました
Cloud Shellでもストレージバケットを作成し、Cloud Shellの機能を使って、ファイルをアップロードしてから、それをストレージバケットにコピーしました
さらに、プロファイルを構成して環境変数をいくつか設定しました
これでラボは終了です
