このラボではデフォルトネットワークを調べて、VPCネットワークがなければVMを作成できないことを確認しました
そこで、サブネット、ルート、ファイアウォール、ルールを備えた自動モードVPCネットワークと、２つのVMを作成し、VMインスタンス間の接続をテストしました
自動モードネットワークは本番環境には適さないため、カスタムモードに変換しました
次に、さらに２つのカスタムモードVPCネットワークと、ファイアウォールルール、VMをConsoleとgcloudコマンドラインを使って作成しました
最後に、VPCネットワーク間の接続をテストしました
これにより外部IPアドレスではpingできても、内部IPアドレスではpingできないことを確認しました
既定ではVPCネットワークは分離されたプライベートネットワーク領域です
そのため内部IPアドレスではネットワーク間で通信できませんが、VPCピアリング、VPC接続などの方法で通信が可能になります
ラボのチュートリアルの注意点として、GCPのUIが実際の環境とは少し異なる場合があります
GCP Consoleの画面です
最初にデフォルトネットワークを調べます
左側のナビゲーションメニューをクリックし、[VPCネットワーク]までスクロールします
このプロジェクトを含め、すべてのプロジェクトにデフォルトネットワークがあります
組織のポリシーで作成されないようになっていて、存在しない場合もありますが、Qwiklabsで使用するプロジェクトには例外なく存在します
さまざまなサブネットがリージョンごとに設定されています
これらはプライベートIPアドレスです
[ルート]に移動すると、ネットワークで自動的に設定されたサブネット間のルートと、インターネットへのデフォルトルートを確認できます
[ファイアウォール]に移動すると、デフォルトネットワークに事前設定されたルールで任意の場所からのICMPトラフィックとRDP、SSHが許可されることがわかります
ネットワーク内のすべてのプロトコルとポートも許可されます
これがネットワークの範囲です
同じネットワーク内からのすべてのトラフィックが許可されます
次はこれらのルールのチェックボックスをオンにして、すべて削除します
事前に作成されたものをすべて削除して独自のネットワークを作成するためです
それを前提に削除しています
上のここでステータスを確認すると、４つすべてが削除中であることがわかります
削除されるたびにステータスが更新されて、今、完了しました
これでネットワークに移動できます
デフォルトネットワークを選択します
このネットワーク全体を削除します
ネットワークが削除されると、ルートがなくなります
ネットワークがなければルートには用途がないからです
削除されるのを待ってから確認します
進行状況バーを見ると、削除中であることがわかります
[更新]も使えます
数秒で完了するはずです
画面を更新すると、サブネットの一部が消えます
すべてのサブネットが削除されてからネットワーク全体が削除されます
ネットワークはサブネットの組み合わせなので、削除するにはすべてのサブネットが削除される必要があります
これでネットワークだけが残りました
[ルート]に移動すると、すべて消えています
サブネットがなければルートは不要だからです
[VPCネットワーク]に戻ると、ネットワーク自体も消えています
このとおりです
VPCネットワークが存在しないので、VMもコンテナもApp Engineアプリも作成できないはずです
それを確認するためにナビゲーションメニューで[Compute Engine]に移動します
インスタンスを作成してみます
[作成]をクリックします
すべてデフォルトのままにします
[ネットワーキング]を展開すると、エラーが表示されているはずです
クリックして展開すると、有効なローカルネットワークがないようですが、[作成]をクリックしてみます
エラーになりました
このタブに問題があると指摘されています
明らかにインスタンスを作成できません
インスタンスはネットワーク内に存在するため、ネットワークがなければ作成できません
[キャンセル]をクリックして、独自の自動モードネットワークを作成します
[VPCネットワーク]に戻ります
サービスをメニューに固定できるので、[VPCネットワーク]と[Compute Engine]を固定して移動しやすくします
[VPCネットワーク]に移動したら独自のネットワークを作成します
名前として、ラボの手順と同じ“mynetwork”と入力します
作成モードには[カスタム]と[自動]の選択肢があります
まずは自動ネットワークを作成しましょう
事前設定されるさまざまなサブネットと使用可能なリージョンをスクロールして確認できます
CIDR範囲も事前設定されますが、後で拡張することもできます
これは自動モードネットワークなので、実際のIPアドレス範囲は定義しません
使用可能なファイアウォールルールを見ると、興味深いことに、deny-all-ingressルールとallow-all-egressルールがあります
これらは暗黙のルールなので、無効にするチェックボックスもありません
作成するどのネットワークにも設定されるルールです
優先度の値が最も大きい整数になっているのは、優先度が最も低いことを意味します
既定ではすべての内向きトラフィックが拒否されすべての外向きトラフィックが許可されます
ただし別のルールを作成すれば変更可能です
すべてのチェックボックスをオンにして、内向きトラフィックを、これらのIP範囲およびプロトコルとポートで許可します
この設定で[作成]をクリックします
ネットワークが作成されるのを待ってから、リージョンのうちの２つについてIPアドレスを確認し、これらのリージョンにインスタンスを作成して当該IPアドレスが使用されることを確認します
サブネットがすでに表示されています
ここで進行状況をモニタリングできますが、すぐに完了するはずです
[Compute Engine]に移動して、インスタンスの作成に取り掛かります
[作成]をクリックします
名前を付けます
“mynet-us-vm”です
us-central1のゾーンCに配置します
テスト目的なので、大きなマシンではなく、microマシンを作成します
これで費用が少し抑えられます
この設定で[作成]をクリックします
同じ手順を繰り返します
このパネルを閉じて、同じワークフローで今度は欧州にインスタンスを作成します
ラボの手順から名前を取得します
europe-west1リージョンのゾーンCを選択します
今回も共有コアのmicroマシンにします
[作成]をクリックします
us-central1-cマシンはすでに稼働中になっています
割り当てられた内部IPアドレスも表示されています
予約済みのIPアドレスがあり、.0と.1は予約されているので、IP範囲で最初に使用できるアドレスは.2です
正しいサブネット内のものであることを確認するには、[nic0]をクリックして、[ネットワークインターフェースの詳細]に移動します
ここでサブネットを確認できます
これは自動ネットワークなので、サブネットとネットワークの名前は同じです
この範囲に含まれているかを確認します
10.128.0.0/20です
これを確認しましょう
確認できました.2のアドレスは範囲内にあります
もう一方が、10.132.0.0/20であることを確認しましょう
[nic0]をクリックします
サブネットの詳細に移動すると、これも確認できました
このアドレスがゲートウェイのものであることも確認できます
したがって、.2が範囲内で使用できる最初のアドレスでした
どちらも同じネットワーク上にあるので、相互接続できることを確認しましょう
そのために取得するのは、mynet-us-vmの内部IPアドレスです
これをコピーしてもう一方のVMにSSH接続します
２つのインスタンスが配置されているリージョンは異なりますが、ネットワークは同じです
そのため、内部IPアドレスに対してpingできるはずです
内部アドレスを使用してpingを３回実行します
成功しました
成功した理由は、allow-internalファイウォールルールを選択したからです
同じことを、今度はインスタンス名を使って繰り返します
インスタンス名、実際には完全修飾ドメイン名を使用すると、それに対応するIPアドレスが使用されます
VPCネットワークには内部DNSサービスがあるため、内部IPアドレスの代わりにDNS名でインスタンスをアドレス指定できます
インスタンスの内部IPアドレスは変わる可能性がありますが、名前が変わることはないので、完全修飾名を使用してpingできることを覚えておくと役立ちます
次は、逆の方向で同じことを試してみます
このインスタンスからログアウトして、米国にあるインスタンスの内部IPアドレスを取得し、欧州にあるインスタンスにSSH接続します
同じく内部IPアドレスに対してpingします
成功しました
今度は外部IPアドレスでもpingを試してみます
この例では、34.67.18.18です
これも成功します
外部IPアドレスでもpingできる理由は、外部からのICMPを許可するファイアウォールルールを設定したからです
[ネットワークインターフェースの詳細]でルールを確認できます
すべてのファイアウォールルールが表示され、適用されているフィルタやプロトコルとポートを確認できます
すべて問題なく、このワークフローは機能していますが、この自動モードネットワークをカスタムモードに変換します
それには[VPCネットワーク]に移動します
mynetworkをクリックします
[編集]をクリックします
[サブネット作成モード]を[自動]から[カスタム]に変更します
[保存]をクリックします
これで、元の画面に戻れます
処理中であることを確認できます
[自動]モードをここで切り替えることもできます
更新されるのを待ちましょう
サブネットがカスタムサブネットになったことがわかります
これがうまくいったとして、さらにネットワークが必要になったとします
ラボのネットワーク図に、別の２つのネットワークとインスタンスが示されています
これらを作成しましょう
[VPCネットワークを作成]をクリックします
managementというネットワークを作成しますが、自動モードから変換するのではなく、最初からカスタムで作成します
それには各サブネットの定義が必要です
必要最小限の情報として、名前、リージョンを指定します
us-central1を選択します
IPアドレス範囲も指定します
[完了]をクリックしたら、引き続き別のサブネットも追加できます
今はGCP Consoleで作成していますが、ネットワークとサブネットの作成にはCloud Shellのコマンドラインも使用できます
下の[コマンドライン]をクリックすると、対応するコマンドが表示されます
最初のコマンドはネットワーク自体を作成します
projectフラグを使用する必要はありません
gcloud compute networks createの後にネットワーク名と、カスタムモードであることを指定します
同様にしてサブネットを作成します
network subnets createの後にサブネット自体の名前、network、region、rangeを続けます
繰り返しますが、これが必要最小限の情報です
[閉じる]、[作成]をクリックしておき、もう一方はコマンドラインで作成します
ネットワークが作成されている間、ここをクリックしてCloud Shellをアクティブにします
右下の[Cloud Shellの起動]で起動を確認します
もう少し広くします
起動したら、最初のネットワークの作成時に確認したコマンドを使います
privatenetという名前の同じくカスタムモードのネットワークです
このネットワーク内に２つのサブネットを作成します
Consoleで、もう一方のネットワークが作成されたことを確認できます
privatenetは現在作成中です
作成されたら、２つのサブネットを追加できます
ではサブネットを作成します
この新しいネットワークにはファイアウォールルールがないため、ルールを作成するためのコマンドも提示されます
とりあえずサブネットを作成します
最初に米国に作成します
欧州にも作成します
別のCloud Shellセッションを開始して、同時進行することもできます
ネットワークは稼働中なので、サブネットを並行して作成できますが、現在の処理が完了するのを待ってから先ほどのコマンドをここに貼り付けます
Consoleで[更新]をクリックして、状況をモニタリングできます
ここにも実行した処理が完了したことが示されます
もう一方を作成しましょう
コマンドを正しくコピーしていませんでした
実行します
欧州のeurope-west1に作成されます
[更新]をクリックします
すでに作成されています
このように、すべての要素をGCP Consoleで表示できます
このボタンをクリックすると、Cloud Shellを新しいタブで開けます
こうして最新の状態を表示しておき、ConsoleとCloud Shellのどちらでも操作できます
では実際に最新の状態を表示してみます
いったんクリアして、ネットワークを一覧表示するコマンドを貼り付けます
gcloud compute networks listです
ネットワークは３つあり、いずれもカスタムです
詳細を調べるために、サブネットも一覧表示します
sort-byコマンドを使って、ネットワークを基準に並べ替えます
mynetworkは元は自動モードだったので、多数のサブネットがありますが、managementのサブネットは１つです
次は[ファイアウォールルール]をクリックして、ルールを作成します
すでにいくつかあります
[ファイアウォールルールを作成]をクリックし、前と同じくConsoleで作成してから、もう一方のネットワーク用のルールをCloud Shellで作成します
名前を付けます
このファイアウォールルールを適用する正しいネットワークを選択します
適用対象は全インスタンスにします
IP範囲にはすべてのアドレスを選択します
このルールで許可するのは、ICMP、SSH、RDPなので、まずICMPを定義します
次に、SSHの22、RDPの3389を指定します
下にある[コマンドライン]をクリックすると、１つの長いコマンドが表示されます
projectフラグを指定する必要はありません
gcloud compute firewall-rules createの後に、ルール名と対象が内向きであることを指定します
priorityはデフォルトなので省略できます
重要な点として、networkとaction=ALLOWもデフォルトです
そしてrulesとsource-rangesです
これをConsoleで作成します
ラボの手順のコマンドをコピーして、もう一方のネットワークで繰り返します
ここに貼り付けます
これでもう一方のファイアウォールルールが作成されます
Consoleでルールをモニタリングできるほか
Cloud Shellでもコマンドを実行してルールを一覧表示できます
すべて作成されました
コマンドで一覧表示できます
画面を更新すると、ここにも表示されます
次は、追加のインスタンスを作成して、インスタンス間の接続を確認します
[Compute Engine]に戻ります
新しく作成したネットワーク内にインスタンスを作成します
[インスタンスを作成]をクリックします
Cloud Shellは閉じておきます
閉じずに小さくするだけにします
名前を指定します
us-central1-c smallマシンで十分です
重要なのは、このオプションを展開して、３つの選択肢から正しいネットワークを選ぶことです
実際には、そのネットワークが先頭にリストされているので、すでに選択されています
正しい選択です
[完了]をクリックして、コマンドラインを確認します
大量の情報ですが、この後、コマンドを実行するときには必要ありません
ブートディスクなどには標準の設定を使うためです
[作成]をクリックします
ラボのコマンドを入力して、同じインスタンスを別のネットワーク内に作成します
gcloud compute instances createの後に、インスタンス名、zone、machine-type、subnetが続きます
これが必要最小限の情報です
実行します
他のインスタンスはすでに作成されています
画面を更新して、追加のインスタンスも表示されるか確認します
Cloud Shellが更新されたら、インスタンスを一覧表示できます
一覧表示します
ゾーンまたはネットワークを基準に並び替えると、このゾーンには１つ、別のゾーンには３つのインスタンスがあります
これらが別々のネットワーク内にあることを確認するには、列表示オプションで[ネットワーク]を選択します
これらのインスタンスは同じmynetwork内にありますが、他は別々のネットワーク内にあります
これらのインスタンス間での接続を確認します
外部と内部の両方のIPアドレスでpingが成功するか確かめます
始めに、management-us-vmの外部IPアドレスを取得します
mynet-us-vmにSSH接続します
同じゾーンにありますが、配置されているネットワークは異なります
外部IPアドレスでpingを試してから内部IPアドレスで試します
ルールで許可されているので、外部IPアドレスでは成功します
次は、同じことをprivatenetでも試します
IPアドレスに接続します
35.8.20.220です
この場合も成功します
別々のネットワーク内にあるインスタンスでもpingできます
内部IPについては、mynet-us-vmにしかpingできないはずですが、これは前に試したので他のもので試してみます
10.130.0.2で試します
何も起こりません
100%のパケットロスになるはずです
もう一方でも試してみます
172.16.0.2です
この場合も成功しません
このインスタンスはpingを試行している他のインスタンスと同じゾーンにありますが、別のネットワーク内にあるため内部IPではpingできません
アクセス可能にするには、VPCピアリングやVPNなどを設定する必要があります
以上で終了です
