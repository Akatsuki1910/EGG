このセクションでは、クラウドでの開発とデプロイからロギングとモニタリングに焦点が移ります
まずはモニタリングです
モニタリングはプロダクトの信頼性の基盤です
至急対応が必要な事柄や、アプリの利用パターンの傾向が把握できます
それを基に的確なキャパシティを計画し、アプリのUXを改善してストレスを減らせます
Googleの「Site Reliability Engineering」という本は、landing.google.com/sre/booksで入手できますが、この本では、モニタリングとはシステムに関するリアルタイムの定量データの収集、処理、集計、表示と定義されています
クエリの件数と種類、エラーの件数と種類、処理時間、サーバーの存続時間などのデータです
モニタリングにより安定したシステム運用を維持できます
時系列的な傾向を発見できます
ダッシュボードを構築できます
所定のサービスレベル目標に達しないときは、担当者に警告できます
変更前後のシステムを比較できます
インシデント対応を改善するためのデータを提供できます
これらはほんの一部です
アプリの利用者は通常、プロダクトの表面的な部分しか見ません
そのため開発者もビジネス利害関係者も利用者の満足度を高めるために最も重要なことは、目に見える部分の開発に時間と労力を注ぐことだと思いがちです
しかし、真の信頼を得るにはどんなに優れたプロダクトでも、予測される負荷に対処できる環境にデプロイしなければなりません
優れたプロダクトには徹底的なテストも必要です
洗練されたCI/CDパイプラインを通じた自動テストだとなお望ましいです
事後検証と根本原因分析は、インシデントがなぜ発生したか、そして、なぜ再発しないのかを、DevOpsチームが利用者に知らせる手段です
この文脈では、システムやソフトウェアの障害を指しますが、“インシデント”という言葉はセキュリティ違反も指します
ここでは透明性が信頼構築の鍵です
プロダクトは継続的に改善する必要があり、そのためにはデータをモニタリングする必要があります
BIダッシュボードでDevOpsに必要なデータを提供する必要があります
人間は自分が重要だと思うものしか見ないので、自動アラートも必要です
できるだけ多くのアラートを処理する自動化システムを構築することができれば、人間は深刻な問題にだけ対応すれば済みます
そして、モニタリングツールを使用し、アプリの機能やパフォーマンスの問題を修正するために不可欠なデータを入手します
Googleの統合型モニタリングツールはモジュール後半で詳しく取り上げます
