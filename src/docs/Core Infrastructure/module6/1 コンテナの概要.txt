前述のように、Compute Engineは、サーバーアクセス、ファイルシステム、ネットワーキングを備えた、Google CloudのIaaSソリューションであり、App EngineはGoogle CloudのPaaSソリューションです
本コースのこのセクションでは、コンテナとその使い方を見ていきます
IaaSはVMを使ってハードウェアを仮想化することによって、他の開発者との演算リソースの共有を可能にします
各開発者は、独自のOSをデプロイしてハードウェアにアクセスし、RAM、ファイルシステム、ネットワークインターフェースなどを備えた、自己完結型の環境でアプリをビルドできます
ここで登場するのがコンテナです
コンテナの目的は、PaaSではワークロードの独立したスケーラビリティを実現し、IaaSではOSとハードウェアの抽象化レイヤを提供することです
構成可能なシステムでは、好みのランタイム、ウェブサーバー、DB、ミドルウェアをインストールし、基盤となるシステムリソース（ディスクの容量とI/O、ネットワークなど）を構成して、独自のビルドを実現できます
ただし、柔軟性には費用が伴います
演算の最小単位はVMを備えたアプリですが、ゲストOSは容量がGB単位まで大きくなることもあり、起動に何分もかかります
アプリの需要が高まると、各インスタンス用にVM全体をコピーしてゲストOSを起動しなければならず、これには時間と費用がかかります
App Engineなら、プログラミングサービスにアクセスして、これらのサービスを使う自己完結型のワークロード内でコードを記述し、依存関係のあるライブラリを含めるだけです
つまり、アプリの需要が高まると、ワークロードとインフラにより、シームレスかつ独立した形でスケーリングが行われます
スケーリングは高速ですが、基盤アーキテクチャを微調整して費用を抑えることはできません
コンテナは、コードとその依存関係を含む目に見えない入れ物で、固有のパーティションとハードウェアにのみアクセスします
数回のシステム呼び出しのみで作成でき、プロセスと同じくらい迅速に起動します
各ホストに必要なのは、コンテナとコンテナランタイムをサポートするOSカーネルだけです
実質的にはOSの仮想化と同じです
PaaSのようにスケールしますが、IaaSとほぼ同等の柔軟性も備えています
これによってコードがポータブルになり、OSとハードウェアをブラックボックスとして扱えます
つまり、開発からステージング、本番環境まで、またノートPCからクラウドへの移動時にも変更や再ビルドの必要がありません
例として、ウェブサーバーをスケーリングするとします
コンテナを使うと、単一ホスト上のワークロードのサイズに応じて数秒で、何十、何百の規模にスケーリングできます
これは、単一ホスト上でアプリ全体を実行する１つのコンテナをスケーリングする例です
でも皆さんは、マイクロサービスのように、機能が異なる複数のコンテナを使ってアプリをビルドしたいと思うでしょう
この方法でアプリをビルドして、ネットワーク接続すると、モジュラー型でデプロイしやすく、複数のホストで個々にスケーリングできるアプリが完成します
アプリの需要の変動や、ホストでの障害発生に合わせて、ホストのスケーリングやコンテナの起動と停止を行えます
