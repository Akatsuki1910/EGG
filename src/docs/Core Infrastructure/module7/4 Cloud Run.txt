最後に取り上げるアプリプラットフォームCloud Runは、ウェブリクエストやPub/Subイベント経由でステートレスコンテナを実行できる、マネージド演算プラットフォームです
Cloud Runはサーバーレスです
つまり、インフラ管理タスクは一切不要であり、開発者はアプリの開発に専念できます
Kubernetes上に構築された
オープンなAPIとランタイム環境であるKnativeを基に構築され、ワークロードを各種の環境やプラットフォーム間で自由に移動できます
Google Cloud、GKE、またはKnativeが実行される任意の環境でフルマネージドが可能です
Cloud Runは高速です
ほぼ瞬時にゼロから自動的にスケールアップ/ダウンでき、リソースを使用した分だけ課金されるので（100ミリ秒単位で切り捨て）、リソースのオーバープロビジョニングに対する費用は発生しません
Cloud Runの開発者ワークフローは単純明快な３段階のプロセスです
まず、任意のプログラミング言語を使ってアプリを記述します
このアプリは、ウェブリクエストをリッスンするサーバーを起動する必要があります
次に、アプリをビルドしてコンテナイメージにパッケージ化します
最後に、コンテナイメージがArtifact Registryにpushされ、Cloud Runによってデプロイされます
Cloud RunがデプロイできるのはArtifact Registry内のイメージだけです
必要な権限を持っていれば、ローカルソースから独自のコードをビルド、push、デプロイできます
Artifact Registry内の既存イメージのデプロイも行えます
コンテナイメージをデプロイすると、一意のHTTPS URLが得られます
後は Cloud Runがオンデマンドでコンテナを起動してリクエストを処理し、着信リクエストがすべて確実に処理されるようコンテナを動的に追加、削除します
Cloud Runはサーバーレスなので、開発者はアプリの構築に集中でき、基盤インフラの構築と維持に関わる必要がありません
一部のユースケースでは、透明性と柔軟性に優れたコンテナベースのワークフローが適しています
コンテナイメージをビルドする場合は、コンテナイメージに含めるファイルとそれを達成する方法を、自分で正確に決定できます
しかし、アプリを構築するだけでも一苦労なのに、コンテナ化やそれに付随する責任のことも考えるのは大変です
ソースコードをHTTPSエンドポイントに変える方法が知りたい、コンテナイメージの安全で一貫した構成やビルドはベンダーに任せたいと思うこともあるでしょう
Cloud Runではどちらも可能です
コンテナベースのワークフローもソースベースのワークフローも使えます
ソースベースのアプローチでは、コンテナイメージではなく、ソースコードをデプロイします
後は、Cloud Runがソースをビルドし、アプリをコンテナイメージにパッケージ化します
これにはBuildpacksというオープンソースプロジェクトが使われます
Cloud RunはHTTPSを自動的に処理します
開発者はウェブリクエストの処理だけを気にすればよく、暗号化の追加はCloud Runに任せることができます
デフォルトでは、アプリはグローバルなrun.appドメインの一意のサブドメインで公開されます
独自のカスタムドメインも使えます
他はCloud Runがすべて管理します
これには、有効なSSL証明書の生成、安全な設定を使用したSSL終端の適切な構成、着信リクエストの処理、復号、アプリへの転送が含まれます
Cloud Runの料金モデルは独特です
課金の対象となるのは、コンテナがウェブリクエストを処理した期間（100ミリ秒単位）と、コンテナの起動/シャットダウンの間に使われたシステムリソースのみです
コンテナがリクエストを処理しなければ課金されません
また、100万件のリクエストを処理するたびに少額の料金が発生します
コンテナ時間の料金はCPUとメモリに応じて上がります
コンテナが使うvCPUの数とメモリが多いほど、料金は高くなります
現在、Cloud Runは最大４個のvCPUと８GBのメモリを割り当てることができます
Compute Engineなど他の大半の演算プロダクトでは、使うかどうかに関係なくサーバーが実行されれば課金されます
つまり、サーバーがアイドル状態でも料金が発生します
Cloud Runでは、Linux 64ビット用にコンパイルされたあらゆるバイナリを実行できます
つまり、次のような一般的な言語を使って記述した、ウェブアプリを実行できます
Java、Python、Node.js、PHP、Go、C++などです
次のようなあまり使われない言語で記述したコードも実行できます
Cobol、Haskell、Perlなどです
アプリがウェブリクエストを処理しさえすれば大丈夫です
