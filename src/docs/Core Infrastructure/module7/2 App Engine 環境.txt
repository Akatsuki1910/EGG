App Engineにはスタンダードと、フレキシブルの２種類の環境があります
スタンダード環境は、Googleのインフラで実行されるコンテナインスタンスに基づいています
コンテナでは、サポートされる言語とバージョンのランタイムが事前構成済みです
これにはApp Engine標準APIをサポートするライブラリが含まれます
多くのアプリでは、スタンダード環境のランタイムとライブラリがあれば十分です
スタンダード環境の機能には、クエリ、並べ替え、トランザクションが可能な永続ストレージ、自動スケーリングと負荷分散、リクエストの範囲外の作業を行うための非同期タスクキュー、指定の時刻または一定間隔でイベントをトリガーするスケジュールされたタスク、他のGoogle CloudサービスやAPIとの統合が含まれます
スタンダード環境の使用には２つの要件があります
Java、Python、PHP、Go、Node.js、Rubyの指定されたバージョンを使う必要があります
またアプリは、ランタイムに依存するサンドボックス制約を遵守する必要があります
アプリは安全なサンドボックス環境で実行されます
そのため、スタンダード環境ではリクエストを複数のサーバーに分散し、トラフィックの需要に合わせてサーバーをスケールできます
これは、サーバーのハードウェア、OS、物理的な場所に関係なく、安全性と信頼性の高い独自の環境でアプリが実行されることを意味します
スタンダード環境のワークフローは次の３ステップで進めます
まず、ウェブアプリを開発しローカルでテストします
次に、SDKを使用してアプリをApp Engineにデプロイします
最後に、App Engineがアプリをスケールし、アプリの要求に応えます
App Engineにはフレキシブル環境も用意されています
スタンダード環境のサンドボックスモデルでは、制約が多すぎる場合はフレキシブル環境でウェブアプリを実行するコンテナのタイプを指定できます
この場合、アプリをGoogle CloudのCompute Engine VM上のDockerコンテナ内で実行できます
これらのCompute EngineマシンはApp Engineが管理します
つまり、ヘルスチェックが行われ必要に応じて修復されるほか、プロジェクト内の他のモジュールインスタンスと同じ場所に配置されます
下位互換性のある重要な更新が基盤となるOSに自動的に適用されます
VMインスタンスは、プロジェクトの設定に従い、地理的なリージョンごとに自動的に配置されます
Googleの管理サービスによりプロジェクトの全VMが同じ場所に配置され、最適なパフォーマンスが得られます
VMインスタンスは毎週再起動されます
再起動中に、Googleの管理サービスがOSとセキュリティの更新を適用します
フレキシブル環境は、マイクロサービス、認証、SQLおよびNoSQLデータベース、トラフィック分割、ロギング、検索、バージョニング、セキュリティスキャン、Memcache、コンテンツ配信ネットワークをサポートしています
App Engineフレキシブル環境のユーザーは本来の仕事であるコードの記述に専念しながら、カスタムの構成やライブラリを利用できます
また、App Engineフレキシブル環境ではDockerfileを使用して、VMのランタイム、さらにはOSをカスタマイズできます
Python、Java、Go、Node.js、PHP、Rubyのランタイムをサポートしている点は、App Engineスタンダード環境と同じです
ただし、フレキシブル環境ではこれらのランタイムの別のバージョンも使えます
独自のカスタムランタイムを提供するには、オープンソースコミュニティのDockerfileか、カスタムDockerイメージを用います
では、この２つの環境はどう違うのでしょうか？
まずはスタンダード環境です
これは高速で、アプリのインスタンスが秒単位で起動します
ただし、アプリが実行されるインフラへのアクセス性は劣ります
スタンダード環境では、アプリが実行されるVMにSSHで接続することができず、ローカルディスクへの書き込みもできません
サードパーティバイナリは一部の言語でのみサポートされ、ネットワークの呼び出しはApp Engineから行います
最後に料金は無料枠を使い切った後にインスタンスクラスに応じて課金され、自動シャットダウンがあります
フレキシブル環境では起動時間は秒単位ではなく分単位です
しかし、アプリが実行されるVMにSSHで接続でき、一時領域としてローカルディスクを使えます
サードパーティソフトウェアを利用でき、App Engineを介さずにアプリからネットワークを呼び出せます
料金は、リソース割り当てに応じて１時間単位で課金され、自動シャットダウンはありません
App EngineはDockerコンテナを使うため、GKEとの違いがわかりにくいかもしれません
App Engineスタンダード環境は、ウェブ/モバイルアプリのデプロイとスケーリングを最大限に自動制御するサービスが必要な人向けです
それに対してGKEでは、アプリのオーナーがKubernetesの柔軟性をフルに活用できます
App Engineのフレキシブル環境は両者の中間にあります
