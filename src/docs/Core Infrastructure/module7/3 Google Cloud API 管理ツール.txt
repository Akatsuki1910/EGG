App Engineの概要がわかったところで、次にCloud EndpointsとApigee Edgeに移りましょう
Google CloudのAPIを管理するためのツールです
APIとは何でしょうか？
ソフトウェアサービスの実装は複雑でよく変更されるのものです
サービスを他のソフトウェアサービスで使うのに明示的で詳しいコーディングが必要だと、結果は脆弱でエラーが起きやすくなります
そのため、アプリ開発者は作成するソフトウェアを構造化して、簡潔で明確に定義されたインターフェースで不必要な細部を隠し、そのインターフェースを文書化します
これがAPIです
インターフェースを変えない限り、基になる実装は自由に変更でき、APIを使用する他のソフトウェアはそれを意識する必要もありません
機能の追加や廃止などのためにAPIの変更が必要になるときもあります
APIに対するこの種の変更を明確に行うため、開発者はバージョンを作成します
たとえばAPIのバージョン１にない呼び出しをバージョン２に含めることができます
つまり、そのAPIを使うプログラムはAPIのバージョンを呼び出し時に指定できます
APIのサポートは非常に重要であり、Google Cloudは２つのAPI管理ツールを提供しています
Cloud EndpointsとApigee Edgeです
Cloud Endpointsは分散API管理システムであり、分散型のExtensible Service Proxyを使います
これは専用のDockerコンテナで実行されるサービスプロキシです
特に要求の厳しいAPIの開発や維持管理に役立つよう、低レイテンシと高性能を実現します
Cloud EndpointsはAPI Console、ホスティング、ロギング、モニタリングなど、APIを作成、共有、維持、保護するための機能を提供します
Cloud EndpointsはOpenAPI仕様をサポートするAPIで使用できます
Cloud Endpointsは、App Engine、GKE、Compute Engineで実行されるアプリをサポートします
クライアントにはAndroid、iOS、JavaScriptが含まれます
APIプロキシの開発と管理に使えるもう一つのプラットフォームは、Apigee Edgeです
Cloud Endpointsとは異なり、Apigee Edgeはレート制限、割り当て、分析のようなビジネス上の問題に特に重点を置いています
実際、多くのApigee Edgeユーザーが他社にソフトウェアサービスを提供しています
Apigee EdgeのバックエンドサービスはGoogle Cloud上になくてもよいため、レガシーアプリを廃止するためにApigee Edgeが使われることもよくあります
大規模で重要なアプリ全体を一度に移行する代わりに、Apigee Edgeを使ってアプリのサービスを個別に運用から外せます
これにより、マイクロサービスを立ち上げて各機能を順に実装していき、最終的にレガシーアプリの提供を完全に終了できます
