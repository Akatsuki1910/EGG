これまでGoogle Cloudリソースの作成には、ConsoleとCloud Shellを使用しました
Consoleをおすすめするのは、サービスを初めて使用する場合やUIを使いたい場合です
Cloud Shellは、特定のサービスを使い慣れていて、コマンドラインで迅速にリソースを作成したい場合に最適です
Terraformはさらに一歩進んでいます
TerraformはInfrastructure as Code（IaC）用のツールの１つです
Terraformの詳細を探る前にIaCの仕組みを確認しましょう
IaCはインフラの迅速なプロビジョニングと削除を可能にするものです
デプロイのオンデマンド、プロビジョニングは優れた機能です
これをCIパイプラインに組み込むことで、継続的デプロイへの道がスムーズになります
自動インフラプロビジョニングとは、インフラをオンデマンドで用意できることを意味し、デプロイの複雑性はコードで管理されます
このため、要件の変化に応じてインフラを柔軟に変更できます
すべての変更は一元管理されます
開発やテスト環境用のインフラで本番環境を簡単に再現でき、使用しなくなったら直ちに削除できます
これがIaCの仕組みです
IaCに使用できるツールはいくつかあります
Google CloudはTerraformに対応しており、構成と呼ばれるファイルにデプロイを記述します
構成はプロビジョニングされる全リソースの詳細を表します
テンプレートで構成をモジュール化すれば、デプロイ間で再利用可能なコンポーネントにリソースを抽象化できます
Google CloudはTerraform以外のIaCツールもサポートしています
Chef、Puppet、Ansible、Packerなどです
ですがこのコースの焦点はTerraformです
TerraformはCloudリソースに使えるオープンソースツールです
VM、コンテナ、ストレージ、ネットワーキングなどのリソースをプロビジョニングするには、宣言型構成ファイルを使用します
アプリに必要なリソースを宣言形式で指定して構成をデプロイするだけです
HashiCorp Configuration Language（HCL）で、ブロック、引数、式を使用してリソースを簡潔に記述できます
このデプロイでは何回繰り返しても一貫した結果を得られ、１つのコマンドかワンクリックでデプロイ全体を削除できます
宣言型アプローチの利点は必要な構成内容を決めたら、構成手順はシステムに任せられることです
各リソースを個別にデプロイするのではなく、アプリやサービスを構成するリソース一式を指定するだけなので、アプリに専念できます
Cloud Shellとは異なり、Terraformはリソースを並行してデプロイします
デプロイには、各Google Cloudサービスの基盤となるAPIを使用します
そのためこれまで説明したほとんどのものをデプロイできます
インスタンス、インスタンステンプレート、グループ、VPCネットワークから、ファイアウォールルール、VPNトンネル、Cloud Router、ロードバランサまで可能です
サポート対象のリソースタイプについては、“Google CloudでTerraformを使用する”をご覧ください
コースのリソースにリンクがあります
Terraform言語は、リソースを宣言するためのUIです
リソースは、GCE、ストレージ、コンテナなどのインフラオブジェクトです
Terraform構成は、一貫してTerraform言語で作成されたドキュメントで、所定のインフラ一式の管理方法をTerraformに指示し、複数のファイルやディレクトリからなる構成にもできます
Terraform言語の構文に含まれる要素を説明します
ブロックはオブジェクトを表し、０個以上のラベルを持てます
ブロックには本文があり、本文で引数やネストしたブロックを宣言できます
引数を使用して名前と式に値を割り当て、これを使って各種IDに値を割り当てます
Terraformは複数のパブリックおよび、プライベートクラウドで使用できます
Cloud ShellにはTerraformがインストール済みです
右側の構成ファイルの例では最初にプロバイダをGoogle Cloudに指定しています
これに続くのはGCEインスタンスとそのディスクの構成です
outputセクションには、デプロイで取得するインスタンスのIPアドレスを指定できます
Terraformの単純な例を見ていきましょう
ラボの前に、Terraformを使用した自動モードネットワークとHTTPファイアウォールルールの設定方法を説明します
この例では、main.tfという単一のファイルでインフラを定義します
インフラが複雑化してきたら、各要素を個別のファイルに分けて管理しやすくできます
main.tfファイルから始めましょう
main.tfファイルには、作成したいインフラを指定します
これは望ましい状態のブループリントのようなものです
まず、プロバイダを定義します
次にネットワークを定義します
auto_create_subnetworksフラグをtrueに設定すると、各リージョンに自動的にサブネットを作成できます
また、mtuを1460に設定します
次にファイアウォールを定義します
TCPアクセスをポート80とポート8080で許可します
Terraformはこのmain.tfファイルの仕様に従ってリソースを作成します
main.tfファイルが完成したら、定義したインフラをCloud Shellでデプロイできます
コマンド“terraform init”を使って、新しいTerraform構成を初期化します
このコマンドをmain.tfファイルと、同じフォルダ内で実行します
terraform initコマンドにより、Googleプロバイダプラグインがダウンロードされ、現在の作業ディレクトリのサブディレクトリに関連ファイルと一緒にインストールされます
プロバイダプラグイン初期化中のメッセージが表示されます
Terraformは Googleからの実行であると認識し、Googleのリソースを取得します
terraform planコマンドは明示的に無効にしない限り更新を行い、構成ファイルで指定された内容に従ってインフラを希望の状態にするために必要な操作を確定します
このコマンドを使用すれば、変更後の実行プランで予想どおりの状態を実現できるかを確認できます
実際のリソースや状態には変更を加えないので便利です
terraform applyコマンドは、main.tfファイルで定義されたインフラを作成します
このコマンドの実行が完了すると定義したインフラを使えるようになります
