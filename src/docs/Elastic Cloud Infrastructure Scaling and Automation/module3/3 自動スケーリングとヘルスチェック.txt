マネージドインスタンスグループの自動スケーリングとヘルスチェックについて、詳しく説明します
前述のとおり、マネージドインスタンスグループには、負荷の増減に基づいてマネージドインスタンスグループからインスタンスを自動的に追加または削除できる、自動スケーリング機能が備わっています
この機能によってトラフィックの増加をアプリで適切に処理できるようになり、リソースの必要性が低下した場合に費用を抑えられます
自動スケーリングのポリシーを定義しておけば、測定された負荷に基づいてオートスケーラーで自動スケーリングが実行されます
適切な自動スケーリングポリシーとしては、CPU使用率、ロードバランシング容量、モニタリング指標に基づくスケーリングや、Pub/Subのようなキューベースのワークロードによるスケーリングがあります
たとえばこのスライドに示すように、インスタンスが２つあり、それぞれのCPU使用率が100%と85%であるとします
CPU使用率の目標値が75%だとすると、CPU負荷を分散させて目標値である75%未満に保つために、オートスケーラーによってインスタンスがもう１つ追加されます
同様に負荷全体が目標値を大幅に下回る場合は、使用率全体が目標値未満となる範囲で、オートスケーラーによってインスタンスが削除されます
インスタンスグループの使用率をモニタリングするにはどうすればよいでしょうか
インスタンスグループまたは、個々のVMをクリックすると、グラフが表示されます
デフォルトでは、過去１時間のCPU使用率が表示されますが、期間は変更でき、ディスク使用率やネットワーク使用率など他の指標を可視化することもできます
これらのグラフは、インスタンスの使用率をモニタリングする場合に便利です
また需要の変化に対応するための、最適な自動スケーリングポリシーの構成を決定するのにも役立ちます
Stackdriver MonitoringでVMインスタンスの使用率をモニタリングすると、複数の通知チャンネルを利用してアラートを設定することもできます
自動スケーリングについて詳しくは、この動画のリンクセクションをご覧ください
マネージドインスタンスグループと、ロードバランサには、ヘルスチェックという重要な構成もあります
これはStackdriverの稼働時間チェックに、非常によく似ています
このスクリーンショットに示すように、プロトコル、ポート、ヘルス条件を定義すると、この構成に基づいてGCPがインスタンスごとに健全性をコンピューティングします
ヘルス条件として、インスタンスの健全性をチェックする頻度（チェック間隔）、レスポンスを待機する時間（タイムアウト）、正常の判断基準となる試行回数（正常しきい値）、失敗の判断基準となる試行回数（異常しきい値）を定義します
このスライドの例では、ヘルスチェックが計15秒で２回失敗すると、インスタンスは異常と見なされます
