OSIモデルのレイヤ７として機能する、HTTP(S)ロードバランシングについて説明します
これは各メッセージの実際の内容を処理するアプリケーションレイヤであり、URLに基づくルートの決定を可能にします
GCPのHTTP(S)ロードバランシングは、インスタンスに対するHTTP(S)リクエストをグローバルにロードバランスします
ユーザーは単一のエニーキャストIPアドレスで、アプリケーションを使用できるため、DNS設定が簡単になります
HTTPトラフィックとHTTP(S)トラフィックは、複数のバックエンドインスタンスと複数のリージョンでロードバランスされます
HTTPリクエストはポート80または8080でロードバランスされ、HTTP(S)リクエストはポート443でロードバランスされます
このロードバランサはIPv4とIPv6のクライアントをサポートし、スケーラブルでプレウォーミングは不要、コンテンツベースとクロスリージョンのロードバランシングが可能です
URLマップを構成して、どのURLをどのインスタンスにルーティングするのかを指定できます
通常、リクエストはユーザーに最も近い、インスタンスグループにルーティングされます
最も近いインスタンスグループに十分な容量がない場合は、十分な容量を持つ次に近いグループにリクエストが送信されます
これらのメリットは、このモジュールの最初のラボで実際に確認します
この図を使用してHTTP(S)ロードバランサのアーキテクチャを紹介します
グローバル転送ルールは、インターネットからの受信リクエストをターゲットHTTPプロキシに転送します
ターゲットHTTPプロキシは各リクエストをURLマップと照合し、各リクエストに適したバックエンドサービスを決定します
たとえば、www.example.com/audioに対するリクエストは、音声ファイル配信用に構成されたインスタンスを含むバックエンドサービスに、www.example.com/videoに対するリクエストは動画ファイル配信用に構成されたインスタンスを含む別のバックエンドサービスに送信できます
バックエンドサービスが各リクエストに適した転送先バックエンドを判断する基準は、処理能力、ゾーン、バックエンドにアタッチされたインスタンスの正常性です
バックエンドサービスにはヘルスチェック、セッションアフィニティ、タイムアウト設定、1つ以上のバックエンドが含まれます
ヘルスチェックではバックエンドサービス用のインスタンスを、構成された間隔でポーリングします
ヘルスチェックに合格したインスタンスは新しいリクエストを受信できます
異常なインスタンスには再び正常になるまでリクエストが送信されません
通常、HTTP(S)ロードバランシングではラウンドロビンアルゴリズムを使用して、インスタンス間でリクエストを分散します
この動作をオーバーライドするためにセッションアフィニティを設定すると、同じクライアントからの全リクエストが同じVMインスタンスに送信されます
バックエンドサービスにはタイムアウト設定もあり、デフォルトは30秒です
バックエンドサービスのバックエンド待機時間がこの時間を過ぎると、リクエストは失敗したと見なされます
これはアイドルタイムアウトでなく固定タイムアウトなので、接続の存続時間を長くするにはこの値を適宜変更します
バックエンド自体に含まれるのはインスタンスグループ、バランシングモード、容量スケーラーです
VMインスタンスが含まれるインスタンスグループは、自動スケーリングが有効または無効なマネージドインスタンスグループにも非マネージドにもできます
ロードバランシングシステムは、バランシングモードに従って、バックエンドを使い切ったかどうかを判断します
あるリージョンのバックエンドサービスのバックエンドをすべて使い切ると、新しいリクエストは自動的にリクエストを処理できる最も近いリージョンにルーティングされます
バランシングモードはCPU使用率または１秒あたりのリクエスト数を基に設定できます
容量設定は、バランシングモード設定と連動する追加制御機能です
たとえば、インスタンスが通常最大80%のCPU使用率で動作するようにする場合は、バランシングモードをCPU使用率80%に設定し、容量を100%に設定します
インスタンス使用率を半分に減らす場合は、バランシングモードはCPU使用率80%のままで容量を50%に設定できます
ちなみに、バックエンドサービスに対する変更は即時に適用されないため、変更内容がネットワーク全体に伝播されるまでに数分かかることがあります
