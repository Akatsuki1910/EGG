このラボでは、外部IPアドレスのないインスタンスを作成し、Cloud IAPを使用してアクセスしました
また、限定公開のGoogleアクセスを有効にしてNATゲートウェイを構成し、vm-internalがGoogle APIおよびサービスとその他のパブリックIPに接続できることを確認しました
外部IPアドレスのないVMインスタンスは外部ネットワークから隔離されます
ですがCloud NATを使えば、インターネット経由で更新、パッチ適用、場合によってはブート処理も行えます
Cloud NATはユーザーの管理、介入なしで高可用性を実現するマネージドサービスです
ラボの注意点として、GCPのUIが実際の環境とは少し異なる場合があります
まず、VMインスタンスを作成します
インスタンス用のVPCネットワークとファイアウォールルールも作成します
ナビゲーションメニューで[VPCネットワーク]までスクロールします
ネットワークを作成します
“privatenet”と名付けます
この名前を入力します
[サブネット作成モード]は“カスタム”のままにします
サブネットを１つ作成して“privatenet-us”と名付けます
これをus-central1リージョンに配置します
手順のとおりにします
IPアドレス範囲も同じにします
[限定公開のGoogleアクセス]は今のところは有効にせずに、無効のままにします
無効な状態での効果を確認するためです
[完了]、[作成]の順にクリックします
ネットワークが作成されて稼働中になってから、ファイアウォールルールを追加して、このネットワーク内に配置するインスタンスにSSHで接続できるようにします
更新してネットワークを確認します
ネットワークが作成されたので、[ファイアウォール]に移動してファイアウォールルールを作成します
名前を付けます
適用先としてprivatenetを指定します
すべてのインスタンスをターゲットにします
[ソースフィルタ]はIP範囲です
任意の場所からSSHでインスタンスに接続可能にするのではなく、具体的な範囲を指定します
Cloud IAPでCloud IAPトンネルを使用するため、CIDR範囲を制限できます
SSH接続に対してTCPポート22を有効にします
“22”を入力して、[作成]をクリックします
作成を待つ間にCompute Engineインスタンスも作成できます
[Compute Engine]に移動します
[作成]をクリックします
名前は“vm-internal”にします
[リージョン]ではサブネットを作成したリージョンを選択します
us-central1を選択してus-central1-cを設定します
マシンタイプはn1-standard-1のままにします
仮想CPUが１個のものです
下にスクロールして、VPCネットワークを選択するために[ネットワーキング]タブを展開します
ネットワークインターフェースを編集します
privatenetネットワークを選択します
サブネットは１つだけです
[外部IPアドレス]を“なし”に設定します
[完了]、[作成]の順にクリックします
このようにしてプライベートインスタンスを作成します
これを閉じます
外部IPアドレスがないインスタンスです
インスタンスが起動したら、SSHでは直接接続できないことを確認できます
外部IPアドレスがないためです
このボタンは機能しないはずです
代わりに使用するのは、IAPトンネルなのでそのためにCloud Shellを開きます
[Cloud Shellをアクティブにする]をクリックします
新しいウィンドウが表示されます
A/Bテストが行われているようです
Cloud Shellが起動しました
正しいプロジェクトが設定されていないので、set projectコマンドを貼り付けます
ここからプロジェクトIDを取得します
これで正しいプロジェクトが設定されました
設定が完了したら、コマンドを実行して、ここからSSH接続します
IAP経由で接続するように指定しています
処理の続行を確認します
パスフレーズを入力して、Enterキーを２回押します
処理が完了すると、コマンドプロンプトが“vm-internal”に変更されます
vm-internalには外部IPアドレスがないので、WWWにpingできないことを確認しましょう
pingコマンドが機能しないのは、vm-internalには外部IPアドレスがないためです
コマンドが失敗するまで待ちます
外部IPアドレスがないインスタンスにネットワーク外部から到達する唯一の手段は、VPNゲートウェイまたはCloud IAPトンネルです
Cloud IAPでは踏み台インスタンスがなくても、SSHとRDP経由でVMへのコンテキストアウェアアクセスが可能です
踏み台インスタンスを作成するのも一考ですが、その場合外部IPを使うことになります
踏み台インスタンスを使用しなくても、Cloud ShellとIAPを使用して接続できます
コマンドが機能しないことを確認できたので、次は限定公開のGoogleアクセスに目を向けます
外部IPアドレスがないVMインスタンスでも限定公開のGoogleアクセスを使用すれば、GoogleのAPIとサービスの外部IPアドレスに到達できます
既定では、この機能は無効にされています
無効な状態での効果をテストしましょう
ナビゲーションメニューを表示し、Storageバケットを作成するために[Cloud Storage]に移動します
[バケットを作成]をクリックします
最も肝心なのはバケットに一意の名前を付けることです
プロジェクトのIDを使用すると、一意の名前にできます
[続行]をクリックし、残りのセクションはすべて既定のままにして、[作成]をクリックします
このバケット名を覚えておきましょう
この後は、Cloud Shellに戻ります
重要な点として、インスタンスvm-internalにまだ接続したままです
これを変更するためにSSH接続を終了して、Cloud Shellに戻ります
次に、公開バケットから自分のバケットにイメージをコピーするコマンドを実行します
バケット名を指定する必要があるので、ここからバケット名を取得します
ここに追加します
イメージがコピーされました
ここに移動して更新すると、イメージがコピーされたことを確認できます
このイメージをクリックします
すると、ネットワークでの限定公開のGoogleアクセスの実装状況が示されます
これについては後で詳しく確認します
次に行う作業として、まずCloud Shellからこのイメージをコピーします
Cloud Shellには外部IPアドレスがあるので、コピーできるはずです
これを実行します
Enterキーをクリックします
バケットを指定するのを忘れました
バケットを変更する必要があります
よくあるエラーです
バケット名を取得します
ここに貼り付けて再試行します
成功です
Cloud Shellでイメージを移動しました
Cloud ShellからCloud Storageにアクセスできるということです
vm-internalインスタンスに戻りましょう
前と同じコマンドを使用して、IAPトンネル経由でSSH接続します
コマンドプロンプトが変わっています
次に、同じコマンドをここにコピーしてこのイメージをコピーします
コピーしてバケット名を変更して、何度か実行します
これを実行します
コマンドが動作しません
vm-internalはVPC内でしか送信できないからです
限定公開のGoogleアクセスが無効にされているためです
２つの選択肢として、失敗してエラーが表示されるまで待つか、Ctrl+Cでリクエストを停止できます
停止することにします
次は、限定公開のGoogleアクセスを有効にします
Cloud Consoleに戻りましょう
ナビゲーションメニューで[VPCネットワーク]に移動します
対象はprivatenetです
限定公開のGoogleアクセスはサブネットごとに有効にするので、サブネットに直接移動して編集アイコンをクリックします
下にスクロールし、[限定公開のGoogleアクセス]を有効にして[保存]をクリックします
更新されるまで待ちます
更新されたら、Cloud Shellに戻ってインスタンスとのSSHセッションでコマンドを再実行してみます
準備ができました
ここでも確認できます
SSHウィンドウに戻ってコマンドを再実行します
成功しました
このように簡単に限定公開のGoogleアクセスを有効にできます
最後のタスクはCloud NATゲートウェイの構成です
このvm-internalは外部IPアドレスがなくても、特定のGoogle APIとサービスにアクセス可能になりましたが、インターネットからは更新やパッチを取得できません
そこでCloud NATゲートウェイを構成しますが、NATゲートウェイがない状態での動作を確認してから有効にします
そのために、SSH接続を終了してCloud Shellインスタンスに戻ります
コマンドプロンプトがCloud Shellに変わりました
sudo apt-get updateを実行します
外部IPアドレスを持つCloud Shellインスタンスでは機能し、すべてのパッケージが出力されます
問題なく機能しています
完了したら再びSSHコマンドを使用し、IAPトンネルを使用してvm-internalに接続します
プロンプトが変わりました
同じコマンドを実行します
いくつかのパッケージが出力されます
限定公開のGoogleアクセスが有効だからです
そのため、Google内のパッケージにはアクセスできますが、Google外部にアクセスしようとすると失敗します
接続は成功しないので停止します
Cloud NATゲートウェイを構成した後で同じコマンドを再実行します
Cloud Consoleに移動します
ナビゲーションメニューで[ネットワークサービス]まで移動して、[Cloud NAT]を選択します
[開始]をクリックします
ラボの手順に従って“nat-config”と名付けます
手順に従うことが重要です
採点されるラボはすべて手順で定義されている名前を使用するためです
privatenetに配置することが重要です
リージョンはus-central1です
Cloud Routerはまだないので作成します
名前を指定して[作成]をクリックするだけで作成できます
[NATマッピング]セクションではゲートウェイにマップするサブネットを選べます
マッピングに使用する静的IPアドレスを手動で割り当てることもできますが、今回は[自動]のままにして[作成]をクリックします
ゲートウェイのステータスが“実行中”に変わるまで待ちます
数秒で“実行中”に変わります
実行中になりましたが、NAT構成がVMに伝播されるまでには最大３分かかります
最低１分は待ってからインターネットへのアクセスを試してください
現在まだvm-internalと確立されているSSHセッションで、コマンドを再実行して今度は機能することを確認します
１分も待たずに試してみると、まだ失敗することがわかります
Ctrl+Cで停止します
あと数分待ってからコマンドを再試行しましょう
数分待ったのでコマンドをもう一度実行します
成功です
すべてのパッケージが出力されているのでCloud NATゲートウェイは機能しています
注意点として、NATゲートウェイが実装するのは送信NATのみです
受信NATは実装しないのでVCPネットワーク外部のホストはインスタンスが開始した接続に応答することしかできません
NATを介してインスタンスへの接続を開始することはできません
このラボではIAPも使用しました
VMインスタンスへの接続時に、IAPは既存のプロジェクトのロールと権限を使用します
既定では、このインスタンスを作成したインスタンスオーナーだけにIAPセキュアトンネルに対するユーザーロールが付与されます
他のユーザーにIAPトンネルを介したVMへの接続を許可するにはこれらのロールを付与します
それには、ナビゲーションメニューから[Identity-Aware Proxy]に直接移動してロールをユーザーに付与できます
以上でラボは終了です
